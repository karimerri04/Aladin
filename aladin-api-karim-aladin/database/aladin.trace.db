2020-04-22 21:32:52 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Column "POSTAL" not found; SQL statement:
INSERT INTO users (id, role_id, user_type, password_hash, first_name, last_name, middle_name, 
gender, email, phone, avatar, address1, address2, city, state, country, postal, secret_question, 
secret_answer, status, create_date) VALUES

(1, 1,'consumer', '5252be3f45d410ad6b478429af835ba4', 'Mrinmoy', 'Majumdar',null,'M', 'arivera2@joomla.org', 
'7-(740)701-4547', 'u/h1tFt9', 'Abshire Inc', '80429 Garrison Crossing', 'Montreal', 'QC', 'CANADA', 'H2E 2L7',
'Diverse', 'Yellow',1,'2017-12-18 00:00:00') [42122-199]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:451)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:427)
	at org.h2.message.DbException.get(DbException.java:205)
	at org.h2.message.DbException.get(DbException.java:181)
	at org.h2.table.Table.getColumn(Table.java:708)
	at org.h2.command.Parser.parseColumn(Parser.java:1377)
	at org.h2.command.Parser.parseColumnList(Parser.java:1362)
	at org.h2.command.Parser.parseInsertGivenTable(Parser.java:1731)
	at org.h2.command.Parser.parseInsert(Parser.java:1684)
	at org.h2.command.Parser.parsePrepared(Parser.java:891)
	at org.h2.command.Parser.parse(Parser.java:788)
	at org.h2.command.Parser.parse(Parser.java:760)
	at org.h2.command.Parser.prepareCommand(Parser.java:683)
	at org.h2.engine.Session.prepareLocal(Session.java:627)
	at org.h2.engine.Session.prepareCommand(Session.java:565)
	at org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1292)
	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:217)
	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:1113)
	at org.h2.server.web.WebApp.getResult(WebApp.java:1436)
	at org.h2.server.web.WebApp.query(WebApp.java:1111)
	at org.h2.server.web.WebApp$1.next(WebApp.java:1073)
	at org.h2.server.web.WebApp$1.next(WebApp.java:1060)
	at org.h2.server.web.WebThread.process(WebThread.java:173)
	at org.h2.server.web.WebThread.run(WebThread.java:93)
	at java.lang.Thread.run(Unknown Source)
2020-04-22 21:33:12 jdbc[3]: exception
org.h2.jdbc.JdbcSQLDataException: Data conversion error converting "'consumer' (USERS: ""USER_TYPE"" INT)"; SQL statement:
INSERT INTO users (id, role_id, user_type, password_hash, first_name, last_name, middle_name, 
gender, email, phone, avatar, address1, address2, city, state, country, postal_code, secret_question, 
secret_answer, status, create_date) VALUES

(1, 1,'consumer', '5252be3f45d410ad6b478429af835ba4', 'Mrinmoy', 'Majumdar',null, 'M', 'arivera2@joomla.org', 
'7-(740)701-4547', 'u/h1tFt9', 'Abshire Inc', '80429 Garrison Crossing', 'Montreal', 'QC', 'CANADA', 'H2E 2L7',
'Diverse', 'Yellow',1,'2017-12-18 00:00:00') -- (1, 1, 'consumer', '5252be3f45d410ad6b478429af835ba4', 'Mrinmoy', 'Majumdar', NULL, 'M', 'arivera2@joomla.org', '7-(740)701-4547', 'u/h1tFt9', 'Abshire Inc', '80429 Garrison Crossing', 'Montreal', 'QC', 'CANADA', 'H2E 2L7', 'Diverse', 'Yellow', 1, '2017-12-18 00:00:00') [22018-199]
2020-04-22 21:34:47 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Column "POSTAL" not found; SQL statement:
INSERT INTO users (id, role_id, user_type, password_hash, first_name, last_name, middle_name, 
gender, email, phone, avatar, address1, address2, city, state, country, postal, secret_question, 
secret_answer, status, create_date) VALUES

(1, 1,'consumer', '5252be3f45d410ad6b478429af835ba4', 'Mrinmoy', 'Majumdar',null,'M', 'arivera2@joomla.org', 
'7-(740)701-4547', 'u/h1tFt9', 'Abshire Inc', '80429 Garrison Crossing', 'Montreal', 'QC', 'CANADA', 'H2E 2L7',
'Diverse', 'Yellow',1,'2017-12-18 00:00:00') [42122-199]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:451)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:427)
	at org.h2.message.DbException.get(DbException.java:205)
	at org.h2.message.DbException.get(DbException.java:181)
	at org.h2.table.Table.getColumn(Table.java:708)
	at org.h2.command.Parser.parseColumn(Parser.java:1377)
	at org.h2.command.Parser.parseColumnList(Parser.java:1362)
	at org.h2.command.Parser.parseInsertGivenTable(Parser.java:1731)
	at org.h2.command.Parser.parseInsert(Parser.java:1684)
	at org.h2.command.Parser.parsePrepared(Parser.java:891)
	at org.h2.command.Parser.parse(Parser.java:788)
	at org.h2.command.Parser.parse(Parser.java:760)
	at org.h2.command.Parser.prepareCommand(Parser.java:683)
	at org.h2.engine.Session.prepareLocal(Session.java:627)
	at org.h2.engine.Session.prepareCommand(Session.java:565)
	at org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1292)
	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:217)
	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:1113)
	at org.h2.server.web.WebApp.getResult(WebApp.java:1436)
	at org.h2.server.web.WebApp.query(WebApp.java:1111)
	at org.h2.server.web.WebApp$1.next(WebApp.java:1073)
	at org.h2.server.web.WebApp$1.next(WebApp.java:1060)
	at org.h2.server.web.WebThread.process(WebThread.java:173)
	at org.h2.server.web.WebThread.run(WebThread.java:93)
	at java.lang.Thread.run(Unknown Source)
2020-04-22 21:35:03 jdbc[3]: exception
org.h2.jdbc.JdbcSQLDataException: Value too long for column """PASSWORD_HASH"" NVARCHAR(20) NOT NULL": "'5252be3f45d410ad6b478429af835ba4' (32)"; SQL statement:
INSERT INTO users (id, role_id, user_type, password_hash, first_name, last_name, middle_name, 
gender, email, phone, avatar, address1, address2, city, state, country, postal_code, secret_question, 
secret_answer, status, create_date) VALUES

(1, 1,'consumer', '5252be3f45d410ad6b478429af835ba4', 'Mrinmoy', 'Majumdar',null,'M', 'arivera2@joomla.org', 
'7-(740)701-4547', 'u/h1tFt9', 'Abshire Inc', '80429 Garrison Crossing', 'Montreal', 'QC', 'CANADA', 'H2E 2L7',
'Diverse', 'Yellow',1,'2017-12-18 00:00:00') [22001-199]
2020-04-22 21:35:35 jdbc[3]: exception
org.h2.jdbc.JdbcSQLDataException: Value too long for column """PASSWORD_HASH"" NVARCHAR(20) NOT NULL": "'5252be3f45d410ad6b478429af835ba4' (32)"; SQL statement:
INSERT INTO users (id, role_id, user_type, password_hash, first_name, last_name, middle_name, 
gender, email, phone, avatar, address1, address2, city, state, country, postal_code, secret_question, 
secret_answer, status, create_date) VALUES

(1, 1, 'consumer',  '5252be3f45d410ad6b478429af835ba4', 'Mrinmoy', 'Majumdar',null,'M', 'arivera2@joomla.org', 
'7-(740)701-4547', 'u/h1tFt9', 'Abshire Inc', '80429 Garrison Crossing', 'Montreal', 'QC', 'CANADA', 'H2E 2L7',
'Diverse', 'Yellow',1,'2017-12-18 00:00:00') [22001-199]
2020-04-22 21:36:05 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "CREATE TABLE
                ALADIN.USERS
                (
                        ID              NVARCHAR(20) NOT NULL  ,
                        ROLE_ID         INT(11) NOT NULL       ,
                        USER_TYPE       NVARCHAR(20)NOT NULL                    ,
                        PASSWORD_HASH   NVARCHAR(POSTAL_CODE[*]) NOT NULL  ,
                        FIRST_NAME      NVARCHAR(50)           ,
                        LAST_NAME       NVARCHAR(50)           ,
                        MIDDLE_NAME     VARCHAR(255)           ,
                        GENDER          VARCHAR(50)            ,
                        EMAIL           NVARCHAR(70) NOT NULL  ,
                        PHONE           NVARCHAR(25) NOT NULL  ,
                        AVATAR          VARCHAR(250)           ,
                        ADDRESS1        NVARCHAR(150)          ,
                        ADDRESS2        NVARCHAR(150) NOT NULL ,
                        CITY            VARCHAR(50) NOT NULL   ,
                        STATE           VARCHAR(50) NOT NULL   ,
                        COUNTRY         NVARCHAR(50)           ,
                        POSTAL_CODE     NVARCHAR(20)           ,
                        SECRET_QUESTION NVARCHAR(100)          ,
                        SECRET_ANSWER   NVARCHAR(100)          ,
                        STATUS          INT(11) NOT NULL       ,
                        CREATE_DATE     DATETIME               ,
                        CONSTRAINT USER_ID PRIMARY KEY(ID)
                ) "; expected "long"; SQL statement:
CREATE TABLE
                aladin.users
                (
                        id              NVARCHAR(20) NOT NULL  ,
                        role_id         INT(11) NOT NULL       ,
                        user_type       NVARCHAR(20)NOT NULL                    ,
                        password_hash   NVARCHAR(postal_code) NOT NULL  ,
                        first_name      NVARCHAR(50)           ,
                        last_name       NVARCHAR(50)           ,
                        middle_name     VARCHAR(255)           ,
                        gender          VARCHAR(50)            ,
                        email           NVARCHAR(70) NOT NULL  ,
                        phone           NVARCHAR(25) NOT NULL  ,
                        avatar          VARCHAR(250)           ,
                        address1        NVARCHAR(150)          ,
                        address2        NVARCHAR(150) NOT NULL ,
                        city            VARCHAR(50) NOT NULL   ,
                        state           VARCHAR(50) NOT NULL   ,
                        country         NVARCHAR(50)           ,
                        postal_code     NVARCHAR(20)           ,
                        secret_question NVARCHAR(100)          ,
                        secret_answer   NVARCHAR(100)          ,
                        status          INT(11) NOT NULL       ,
                        create_date     DATETIME               ,
                        CONSTRAINT user_id PRIMARY KEY(id)
                ) [42001-199]
2020-04-22 21:36:12 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Table "USERS" not found; SQL statement:
INSERT INTO users (id, role_id, user_type, password_hash, first_name, last_name, middle_name, 
gender, email, phone, avatar, address1, address2, city, state, country, postal_code, secret_question, 
secret_answer, status, create_date) VALUES

(1, 1,'consumer', '5252be3f45d410ad6b478429af835ba4', 'Mrinmoy', 'Majumdar',null,'M', 'arivera2@joomla.org', 
'7-(740)701-4547', 'u/h1tFt9', 'Abshire Inc', '80429 Garrison Crossing', 'Montreal', 'QC', 'CANADA', 'H2E 2L7',
'Diverse', 'Yellow',1,'2017-12-18 00:00:00') [42102-199]
2020-04-22 21:36:30 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Table "USERS" not found; SQL statement:
INSERT INTO aladin.users (id, role_id, user_type, password_hash, first_name, last_name, middle_name, 
gender, email, phone, avatar, address1, address2, city, state, country, postal_code, secret_question, 
secret_answer, status, create_date) VALUES

(1, 1,'consumer', '5252be3f45d410ad6b478429af835ba4', 'Mrinmoy', 'Majumdar',null,'M', 'arivera2@joomla.org', 
'7-(740)701-4547', 'u/h1tFt9', 'Abshire Inc', '80429 Garrison Crossing', 'Montreal', 'QC', 'CANADA', 'H2E 2L7',
'Diverse', 'Yellow',1,'2017-12-18 00:00:00') [42102-199]
2020-04-22 21:36:49 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "CREATE TABLE
                ALADIN.USERS
                (
                        ID              NVARCHAR(20) NOT NULL  ,
                        ROLE_ID         INT(11) NOT NULL       ,
                        USER_TYPE       NVARCHAR(20)NOT NULL                    ,
                        PASSWORD_HASH   NVARCHAR(POSTAL_CODE[*]) NOT NULL  ,
                        FIRST_NAME      NVARCHAR(50)           ,
                        LAST_NAME       NVARCHAR(50)           ,
                        MIDDLE_NAME     VARCHAR(255)           ,
                        GENDER          VARCHAR(50)            ,
                        EMAIL           NVARCHAR(70) NOT NULL  ,
                        PHONE           NVARCHAR(25) NOT NULL  ,
                        AVATAR          VARCHAR(250)           ,
                        ADDRESS1        NVARCHAR(150)          ,
                        ADDRESS2        NVARCHAR(150) NOT NULL ,
                        CITY            VARCHAR(50) NOT NULL   ,
                        STATE           VARCHAR(50) NOT NULL   ,
                        COUNTRY         NVARCHAR(50)           ,
                        POSTAL_CODE     NVARCHAR(20)           ,
                        SECRET_QUESTION NVARCHAR(100)          ,
                        SECRET_ANSWER   NVARCHAR(100)          ,
                        STATUS          INT(11) NOT NULL       ,
                        CREATE_DATE     DATETIME               ,
                        CONSTRAINT USER_ID PRIMARY KEY(ID)
                ) "; expected "long"; SQL statement:
CREATE TABLE
                aladin.users
                (
                        id              NVARCHAR(20) NOT NULL  ,
                        role_id         INT(11) NOT NULL       ,
                        user_type       NVARCHAR(20)NOT NULL                    ,
                        password_hash   NVARCHAR(postal_code) NOT NULL  ,
                        first_name      NVARCHAR(50)           ,
                        last_name       NVARCHAR(50)           ,
                        middle_name     VARCHAR(255)           ,
                        gender          VARCHAR(50)            ,
                        email           NVARCHAR(70) NOT NULL  ,
                        phone           NVARCHAR(25) NOT NULL  ,
                        avatar          VARCHAR(250)           ,
                        address1        NVARCHAR(150)          ,
                        address2        NVARCHAR(150) NOT NULL ,
                        city            VARCHAR(50) NOT NULL   ,
                        state           VARCHAR(50) NOT NULL   ,
                        country         NVARCHAR(50)           ,
                        postal_code     NVARCHAR(20)           ,
                        secret_question NVARCHAR(100)          ,
                        secret_answer   NVARCHAR(100)          ,
                        status          INT(11) NOT NULL       ,
                        create_date     DATETIME               ,
                        CONSTRAINT user_id PRIMARY KEY(id)
                ) [42001-199]
2020-04-22 21:37:33 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "                  
        CREATE TABLE
                ALADIN.USERS
                (
                        ID              NVARCHAR(20) NOT NULL  ,
                        ROLE_ID         INT(11) NOT NULL       ,
                        USER_TYPE       NVARCHAR(20)NOT NULL                    ,
                        PASSWORD_HASH   NVARCHAR(POSTAL_CODE[*]) NOT NULL  ,
                        FIRST_NAME      NVARCHAR(50)           ,
                        LAST_NAME       NVARCHAR(50)           ,
                        MIDDLE_NAME     VARCHAR(255)           ,
                        GENDER          VARCHAR(50)            ,
                        EMAIL           NVARCHAR(70) NOT NULL  ,
                        PHONE           NVARCHAR(25) NOT NULL  ,
                        AVATAR          VARCHAR(250)           ,
                        ADDRESS1        NVARCHAR(150)          ,
                        ADDRESS2        NVARCHAR(150) NOT NULL ,
                        CITY            VARCHAR(50) NOT NULL   ,
                        STATE           VARCHAR(50) NOT NULL   ,
                        COUNTRY         NVARCHAR(50)           ,
                        POSTAL_CODE     NVARCHAR(20)           ,
                        SECRET_QUESTION NVARCHAR(100)          ,
                        SECRET_ANSWER   NVARCHAR(100)          ,
                        STATUS          INT(11) NOT NULL       ,
                        CREATE_DATE     DATETIME               ,
                        CONSTRAINT USER_ID PRIMARY KEY(ID)
                ) "; expected "long"; SQL statement:
/* Table: users */
        CREATE TABLE
                aladin.users
                (
                        id              NVARCHAR(20) NOT NULL  ,
                        role_id         INT(11) NOT NULL       ,
                        user_type       NVARCHAR(20)NOT NULL                    ,
                        password_hash   NVARCHAR(postal_code) NOT NULL  ,
                        first_name      NVARCHAR(50)           ,
                        last_name       NVARCHAR(50)           ,
                        middle_name     VARCHAR(255)           ,
                        gender          VARCHAR(50)            ,
                        email           NVARCHAR(70) NOT NULL  ,
                        phone           NVARCHAR(25) NOT NULL  ,
                        avatar          VARCHAR(250)           ,
                        address1        NVARCHAR(150)          ,
                        address2        NVARCHAR(150) NOT NULL ,
                        city            VARCHAR(50) NOT NULL   ,
                        state           VARCHAR(50) NOT NULL   ,
                        country         NVARCHAR(50)           ,
                        postal_code     NVARCHAR(20)           ,
                        secret_question NVARCHAR(100)          ,
                        secret_answer   NVARCHAR(100)          ,
                        status          INT(11) NOT NULL       ,
                        create_date     DATETIME               ,
                        CONSTRAINT user_id PRIMARY KEY(id)
                ) [42001-199]
2020-04-22 21:37:56 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "CREATE TABLE
                ALADIN.USERS
                (
                        ID              NVARCHAR(20) NOT NULL  ,
                        ROLE_ID         INT(11) NOT NULL       ,
                        USER_TYPE       NVARCHAR(20)NOT NULL                    ,
                        PASSWORD_HASH   NVARCHAR(POSTAL_CODE[*]) NOT NULL  ,
                        FIRST_NAME      NVARCHAR(50)           ,
                        LAST_NAME       NVARCHAR(50)           ,
                        MIDDLE_NAME     VARCHAR(255)           ,
                        GENDER          VARCHAR(50)            ,
                        EMAIL           NVARCHAR(70) NOT NULL  ,
                        PHONE           NVARCHAR(25) NOT NULL  ,
                        AVATAR          VARCHAR(250)           ,
                        ADDRESS1        NVARCHAR(150)          ,
                        ADDRESS2        NVARCHAR(150) NOT NULL ,
                        CITY            VARCHAR(50) NOT NULL   ,
                        STATE           VARCHAR(50) NOT NULL   ,
                        COUNTRY         NVARCHAR(50)           ,
                        POSTAL_CODE     NVARCHAR(20)           ,
                        SECRET_QUESTION NVARCHAR(100)          ,
                        SECRET_ANSWER   NVARCHAR(100)          ,
                        STATUS          INT(11) NOT NULL       ,
                        CREATE_DATE     DATETIME               ,
                        CONSTRAINT USER_ID PRIMARY KEY(ID)
                ) "; expected "long"; SQL statement:
CREATE TABLE
                aladin.users
                (
                        id              NVARCHAR(20) NOT NULL  ,
                        role_id         INT(11) NOT NULL       ,
                        user_type       NVARCHAR(20)NOT NULL                    ,
                        password_hash   NVARCHAR(postal_code) NOT NULL  ,
                        first_name      NVARCHAR(50)           ,
                        last_name       NVARCHAR(50)           ,
                        middle_name     VARCHAR(255)           ,
                        gender          VARCHAR(50)            ,
                        email           NVARCHAR(70) NOT NULL  ,
                        phone           NVARCHAR(25) NOT NULL  ,
                        avatar          VARCHAR(250)           ,
                        address1        NVARCHAR(150)          ,
                        address2        NVARCHAR(150) NOT NULL ,
                        city            VARCHAR(50) NOT NULL   ,
                        state           VARCHAR(50) NOT NULL   ,
                        country         NVARCHAR(50)           ,
                        postal_code     NVARCHAR(20)           ,
                        secret_question NVARCHAR(100)          ,
                        secret_answer   NVARCHAR(100)          ,
                        status          INT(11) NOT NULL       ,
                        create_date     DATETIME               ,
                        CONSTRAINT user_id PRIMARY KEY(id)
                ) [42001-199]
2020-04-22 21:56:15 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "(2[*], 2,'ADMIN', '5252be3f45d410ad6b478429af835ba4', 'Theresa'  , 'Russell', 'trussell1', 'F', 'trussell1@about.me', 
'383-(779)851-3208', 'u/h1tFt9', 'Glover, Adams and Bins', '30874 Graceland Terrace', 'Montreal', 'QC', 'CANADA', 'H2E 2L7',
'knowledge base', 'Mauv',1,'2020-04-18 00:00:00')"; expected "(, WITH, SELECT, FROM, TABLE, VALUES"; SQL statement:
(2, 2,'ADMIN', '5252be3f45d410ad6b478429af835ba4', 'Theresa'  , 'Russell', 'trussell1', 'F', 'trussell1@about.me', 
'383-(779)851-3208', 'u/h1tFt9', 'Glover, Adams and Bins', '30874 Graceland Terrace', 'Montreal', 'QC', 'CANADA', 'H2E 2L7',
'knowledge base', 'Mauv',1,'2020-04-18 00:00:00') [42001-199]
2020-04-22 21:56:15 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "(3[*], 2,'CONSUMER', '5252be3f45d410ad6b478429af835ba4', 'Virginia' , 'Reynolds', 'vreynolds', 'F', 'vreynolds0@slashdot.org', 
'84-(228)809-9998', 'u/h1tFt9', 'Rippin, Osinski and Beatty', '0118 Burrows Plaza', 'Montreal', 'QC', 'CANADA', 'H2E 2L7',
'Innovative', 'Turquoise',1,'2020-04-18 00:00:00')"; expected "(, WITH, SELECT, FROM, TABLE, VALUES"; SQL statement:
(3, 2,'CONSUMER', '5252be3f45d410ad6b478429af835ba4', 'Virginia' , 'Reynolds', 'vreynolds', 'F', 'vreynolds0@slashdot.org', 
'84-(228)809-9998', 'u/h1tFt9', 'Rippin, Osinski and Beatty', '0118 Burrows Plaza', 'Montreal', 'QC', 'CANADA', 'H2E 2L7',
'Innovative', 'Turquoise',1,'2020-04-18 00:00:00') [42001-199]
2020-04-22 21:56:15 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "(4[*], 2,'CONSUMER', '5252be3f45d410ad6b478429af835ba4', 'Judy'    , 'Owens', 'jowens3', 'F', 'jowens3@hp.com', 
'30-(772)268-8227', 'u/h1tFt9', 'Altenwerth, Fisher and Heidenreich', '98 Loeprich Way', 'Montreal', 'QC', 'CANADA', 'H2E 2L7',
'capacity', 'Fuscia',1,'2020-04-18 00:00:00')"; expected "(, WITH, SELECT, FROM, TABLE, VALUES"; SQL statement:
(4, 2,'CONSUMER', '5252be3f45d410ad6b478429af835ba4', 'Judy'    , 'Owens', 'jowens3', 'F', 'jowens3@hp.com', 
'30-(772)268-8227', 'u/h1tFt9', 'Altenwerth, Fisher and Heidenreich', '98 Loeprich Way', 'Montreal', 'QC', 'CANADA', 'H2E 2L7',
'capacity', 'Fuscia',1,'2020-04-18 00:00:00') [42001-199]
2020-04-22 21:56:15 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "(5[*], 2,'ADMIN', '5252be3f45d410ad6b478429af835ba4', 'Kelly'    , 'Burns' , 'kburns4', 'F', 'kburns4@icio.us' , 
'86-(857)185-5740', 'u/h1tFt9', 'McCullough-Morar', '1638 Basil Alley', 'Montreal', 'QC', 'CANADA', 'H2E 2L7',
'user-facing', 'Crimson',1,'2020-04-18 00:00:00')"; expected "(, WITH, SELECT, FROM, TABLE, VALUES"; SQL statement:
(5, 2,'ADMIN', '5252be3f45d410ad6b478429af835ba4', 'Kelly'    , 'Burns' , 'kburns4', 'F', 'kburns4@icio.us' , 
'86-(857)185-5740', 'u/h1tFt9', 'McCullough-Morar', '1638 Basil Alley', 'Montreal', 'QC', 'CANADA', 'H2E 2L7',
'user-facing', 'Crimson',1,'2020-04-18 00:00:00') [42001-199]
2020-04-22 21:56:15 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "(6[*], 3,'ADMIN', '5252be3f45d410ad6b478429af835ba4','Peter'    , 'Gilbert' , 'pgilbert6', 'M', 'pgilbert6@eepurl.com'  , 
'52-(372)555-4687', 'u/h1tFt9', 'Robel Inc', '11522 Fuller Avenue', 'Montreal', 'QC', 'CANADA', 'H2E 2L7',
'multi-state', 'Puce',1,'2020-04-18 00:00:00')"; expected "(, WITH, SELECT, FROM, TABLE, VALUES"; SQL statement:
(6, 3,'ADMIN', '5252be3f45d410ad6b478429af835ba4','Peter'    , 'Gilbert' , 'pgilbert6', 'M', 'pgilbert6@eepurl.com'  , 
'52-(372)555-4687', 'u/h1tFt9', 'Robel Inc', '11522 Fuller Avenue', 'Montreal', 'QC', 'CANADA', 'H2E 2L7',
'multi-state', 'Puce',1,'2020-04-18 00:00:00') [42001-199]
2020-04-22 21:56:15 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "(7[*], 3,'CONSUMER', '5252be3f45d410ad6b478429af835ba4','Justin'   , 'Jacobs' , 'jjacobs7', 'M', 'jjacobs7@google.co.uk'  , 
'963-(199)359-2552', 'u/h1tFt9', 'Harris-Bashirian', '95012 Hanover Street', 'Montreal', 'QC', 'CANADA', 'H2E 2L7',
'motivating', 'Crimson',1,'2020-04-18 00:00:00')"; expected "(, WITH, SELECT, FROM, TABLE, VALUES"; SQL statement:
(7, 3,'CONSUMER', '5252be3f45d410ad6b478429af835ba4','Justin'   , 'Jacobs' , 'jjacobs7', 'M', 'jjacobs7@google.co.uk'  , 
'963-(199)359-2552', 'u/h1tFt9', 'Harris-Bashirian', '95012 Hanover Street', 'Montreal', 'QC', 'CANADA', 'H2E 2L7',
'motivating', 'Crimson',1,'2020-04-18 00:00:00') [42001-199]
2020-04-22 21:56:15 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "(8[*], 1,'ADMIN', '5252be3f45d410ad6b478429af835ba4','Kevin'    , 'Bennett' , 'kbennett8', 'M', 'kbennett8@hostgator.com'  , 
'62-(892)710-5713', 'u/h1tFt9', 'Leannon Inc', '459 Coleman Drive', 'Montreal', 'QC', 'CANADA', 'H2E 2L7',
'Exclusive', 'Purple',1,'2020-04-18 00:00:00')"; expected "(, WITH, SELECT, FROM, TABLE, VALUES"; SQL statement:
(8, 1,'ADMIN', '5252be3f45d410ad6b478429af835ba4','Kevin'    , 'Bennett' , 'kbennett8', 'M', 'kbennett8@hostgator.com'  , 
'62-(892)710-5713', 'u/h1tFt9', 'Leannon Inc', '459 Coleman Drive', 'Montreal', 'QC', 'CANADA', 'H2E 2L7',
'Exclusive', 'Purple',1,'2020-04-18 00:00:00') [42001-199]
2020-04-22 21:56:15 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "(9, 4,'ADMIN', '5252be3f45d410ad6b478429af835ba4','Chris'    , 'Murphy' , 'cmurphy9', 'M', ''cmurphy9@over-blog.com'  , 
'64-(272)961-0086', 'u/h1tFt9', 'Mosciski LLC', '2 Ludington Point', 'Montreal', 'QC', 'CANADA', 'H2E 2L7',
'empowering', 'Maroon',1,'2020-04-18 00:00:00[*]');"; SQL statement:
(9, 4,'ADMIN', '5252be3f45d410ad6b478429af835ba4','Chris'    , 'Murphy' , 'cmurphy9', 'M', ''cmurphy9@over-blog.com'  , 
'64-(272)961-0086', 'u/h1tFt9', 'Mosciski LLC', '2 Ludington Point', 'Montreal', 'QC', 'CANADA', 'H2E 2L7',
'empowering', 'Maroon',1,'2020-04-18 00:00:00'); [42000-199]
2020-04-22 21:56:56 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "(2[*], 2, 'ADMIN',  '5252be3f45d410ad6b478429af835ba4', 'Theresa'  , 'Russell', 'trussell1', 'F', 'trussell1@about.me', '383-(779)851-3208', 'u/h1tFt9', 'Glover, Adams and Bins', '30874 Graceland Terrace', 'Montreal', 'QC', 'CANADA', 'H2E 2L7',
'knowledge base', 'Mauv',1,'2020-04-18 00:00:00')"; expected "(, WITH, SELECT, FROM, TABLE, VALUES"; SQL statement:
(2, 2, 'ADMIN',  '5252be3f45d410ad6b478429af835ba4', 'Theresa'  , 'Russell', 'trussell1', 'F', 'trussell1@about.me', '383-(779)851-3208', 'u/h1tFt9', 'Glover, Adams and Bins', '30874 Graceland Terrace', 'Montreal', 'QC', 'CANADA', 'H2E 2L7',
'knowledge base', 'Mauv',1,'2020-04-18 00:00:00') [42001-199]
2020-04-22 21:58:13 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "DROP  INFORMATION_SCHEMA[*].INDEXES "; expected "TABLE, INDEX, USER, SEQUENCE, CONSTANT, TRIGGER, VIEW, ROLE, ALIAS, SCHEMA, ALL, DOMAIN, TYPE, DATATYPE, AGGREGATE, SYNONYM"; SQL statement:
drop  INFORMATION_SCHEMA.INDEXES [42001-199]
2020-04-22 21:59:22 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "CREATE TABLE
                ALADIN.USERS
                (
                        ID              NVARCHAR(20) NOT NULL  ,
                        ROLE_ID         INT(11) NOT NULL       ,
                        USER_TYPE       NVARCHAR(20)NOT NULL                    ,
                        PASSWORD_HASH   NVARCHAR(POSTAL_CODE[*]) NOT NULL  ,
                        FIRST_NAME      NVARCHAR(50)           ,
                        LAST_NAME       NVARCHAR(50)           ,
                        MIDDLE_NAME     VARCHAR(255)           ,
                        GENDER          VARCHAR(50)            ,
                        EMAIL           NVARCHAR(70) NOT NULL  ,
                        PHONE           NVARCHAR(25) NOT NULL  ,
                        AVATAR          VARCHAR(250)           ,
                        ADDRESS1        NVARCHAR(150)          ,
                        ADDRESS2        NVARCHAR(150) NOT NULL ,
                        CITY            VARCHAR(50) NOT NULL   ,
                        STATE           VARCHAR(50) NOT NULL   ,
                        COUNTRY         NVARCHAR(50)           ,
                        POSTAL_CODE     NVARCHAR(20)           ,
                        SECRET_QUESTION NVARCHAR(100)          ,
                        SECRET_ANSWER   NVARCHAR(100)          ,
                        STATUS          INT(11) NOT NULL       ,
                        CREATE_DATE     DATETIME               ,
                        CONSTRAINT USER_ID PRIMARY KEY(ID)
                ) "; expected "long"; SQL statement:
CREATE TABLE
                aladin.users
                (
                        id              NVARCHAR(20) NOT NULL  ,
                        role_id         INT(11) NOT NULL       ,
                        user_type       NVARCHAR(20)NOT NULL                    ,
                        password_hash   NVARCHAR(postal_code) NOT NULL  ,
                        first_name      NVARCHAR(50)           ,
                        last_name       NVARCHAR(50)           ,
                        middle_name     VARCHAR(255)           ,
                        gender          VARCHAR(50)            ,
                        email           NVARCHAR(70) NOT NULL  ,
                        phone           NVARCHAR(25) NOT NULL  ,
                        avatar          VARCHAR(250)           ,
                        address1        NVARCHAR(150)          ,
                        address2        NVARCHAR(150) NOT NULL ,
                        city            VARCHAR(50) NOT NULL   ,
                        state           VARCHAR(50) NOT NULL   ,
                        country         NVARCHAR(50)           ,
                        postal_code     NVARCHAR(20)           ,
                        secret_question NVARCHAR(100)          ,
                        secret_answer   NVARCHAR(100)          ,
                        status          INT(11) NOT NULL       ,
                        create_date     DATETIME               ,
                        CONSTRAINT user_id PRIMARY KEY(id)
                ) [42001-199]
2020-04-22 22:00:17 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "                  
        CREATE TABLE
                ALADIN.USERS
                (
                        ID              NVARCHAR(20) NOT NULL  ,
                        ROLE_ID         INT(11) NOT NULL       ,
                        USER_TYPE       NVARCHAR(20)NOT NULL                    ,
                        PASSWORD_HASH   NVARCHAR(POSTAL_CODE[*]) NOT NULL  ,
                        FIRST_NAME      NVARCHAR(50)           ,
                        LAST_NAME       NVARCHAR(50)           ,
                        MIDDLE_NAME     VARCHAR(255)           ,
                        GENDER          VARCHAR(50)            ,
                        EMAIL           NVARCHAR(70) NOT NULL  ,
                        PHONE           NVARCHAR(25) NOT NULL  ,
                        AVATAR          VARCHAR(250)           ,
                        ADDRESS1        NVARCHAR(150)          ,
                        ADDRESS2        NVARCHAR(150) NOT NULL ,
                        CITY            VARCHAR(50) NOT NULL   ,
                        STATE           VARCHAR(50) NOT NULL   ,
                        COUNTRY         NVARCHAR(50)           ,
                        POSTAL_CODE     NVARCHAR(20)           ,
                        SECRET_QUESTION NVARCHAR(100)          ,
                        SECRET_ANSWER   NVARCHAR(100)          ,
                        STATUS          INT(11) NOT NULL       ,
                        CREATE_DATE     DATETIME               ,
                        CONSTRAINT USER_ID PRIMARY KEY(ID)
                ) "; expected "long"; SQL statement:
/* Table: users */
        CREATE TABLE
                aladin.users
                (
                        id              NVARCHAR(20) NOT NULL  ,
                        role_id         INT(11) NOT NULL       ,
                        user_type       NVARCHAR(20)NOT NULL                    ,
                        password_hash   NVARCHAR(postal_code) NOT NULL  ,
                        first_name      NVARCHAR(50)           ,
                        last_name       NVARCHAR(50)           ,
                        middle_name     VARCHAR(255)           ,
                        gender          VARCHAR(50)            ,
                        email           NVARCHAR(70) NOT NULL  ,
                        phone           NVARCHAR(25) NOT NULL  ,
                        avatar          VARCHAR(250)           ,
                        address1        NVARCHAR(150)          ,
                        address2        NVARCHAR(150) NOT NULL ,
                        city            VARCHAR(50) NOT NULL   ,
                        state           VARCHAR(50) NOT NULL   ,
                        country         NVARCHAR(50)           ,
                        postal_code     NVARCHAR(20)           ,
                        secret_question NVARCHAR(100)          ,
                        secret_answer   NVARCHAR(100)          ,
                        status          INT(11) NOT NULL       ,
                        create_date     DATETIME               ,
                        CONSTRAINT user_id PRIMARY KEY(id)
                ) [42001-199]
2020-04-22 22:00:33 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "CREATE TABLE
                ALADIN.USERS
                (
                        ID              NVARCHAR(20) NOT NULL  ,
                        ROLE_ID         INT(11) NOT NULL       ,
                        USER_TYPE       NVARCHAR(20)NOT NULL                    ,
                        PASSWORD_HASH   NVARCHAR(POSTAL_CODE[*]) NOT NULL  ,
                        FIRST_NAME      NVARCHAR(50)           ,
                        LAST_NAME       NVARCHAR(50)           ,
                        MIDDLE_NAME     VARCHAR(255)           ,
                        GENDER          VARCHAR(50)            ,
                        EMAIL           NVARCHAR(70) NOT NULL  ,
                        PHONE           NVARCHAR(25) NOT NULL  ,
                        AVATAR          VARCHAR(250)           ,
                        ADDRESS1        NVARCHAR(150)          ,
                        ADDRESS2        NVARCHAR(150) NOT NULL ,
                        CITY            VARCHAR(50) NOT NULL   ,
                        STATE           VARCHAR(50) NOT NULL   ,
                        COUNTRY         NVARCHAR(50)           ,
                        POSTAL_CODE     NVARCHAR(20)           ,
                        SECRET_QUESTION NVARCHAR(100)          ,
                        SECRET_ANSWER   NVARCHAR(100)          ,
                        STATUS          INT(11) NOT NULL       ,
                        CREATE_DATE     DATETIME               ,
                        CONSTRAINT USER_ID PRIMARY KEY(ID)
                ) "; expected "long"; SQL statement:
CREATE TABLE
                aladin.users
                (
                        id              NVARCHAR(20) NOT NULL  ,
                        role_id         INT(11) NOT NULL       ,
                        user_type       NVARCHAR(20)NOT NULL                    ,
                        password_hash   NVARCHAR(postal_code) NOT NULL  ,
                        first_name      NVARCHAR(50)           ,
                        last_name       NVARCHAR(50)           ,
                        middle_name     VARCHAR(255)           ,
                        gender          VARCHAR(50)            ,
                        email           NVARCHAR(70) NOT NULL  ,
                        phone           NVARCHAR(25) NOT NULL  ,
                        avatar          VARCHAR(250)           ,
                        address1        NVARCHAR(150)          ,
                        address2        NVARCHAR(150) NOT NULL ,
                        city            VARCHAR(50) NOT NULL   ,
                        state           VARCHAR(50) NOT NULL   ,
                        country         NVARCHAR(50)           ,
                        postal_code     NVARCHAR(20)           ,
                        secret_question NVARCHAR(100)          ,
                        secret_answer   NVARCHAR(100)          ,
                        status          INT(11) NOT NULL       ,
                        create_date     DATETIME               ,
                        CONSTRAINT user_id PRIMARY KEY(id)
                ) [42001-199]
2020-04-22 22:02:15 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "INSERT INTO aladin.users (id, role_id, user_type, password_hash, first_name, last_name, middle_name, 
gender, email, phone, avatar, address1, address2, city, state, country, postal_code, secret_question, 
secret_answer, status, create_date) VALUES

(9, 4,'ADMIN', '5252be3f45d410ad6b478429af835ba4','Chris'    , 'Murphy' , 'cmurphy9', 'M', ''cmurphy9@over-blog.com'  , 
'64-(272)961-0086', 'u/h1tFt9', 'Mosciski LLC', '2 Ludington Point', 'Montreal', 'QC', 'CANADA', 'H2E 2L7',
'empowering', 'Maroon',1,'2020-04-18 00:00:00[*]');"; SQL statement:
INSERT INTO aladin.users (id, role_id, user_type, password_hash, first_name, last_name, middle_name, 
gender, email, phone, avatar, address1, address2, city, state, country, postal_code, secret_question, 
secret_answer, status, create_date) VALUES

(9, 4,'ADMIN', '5252be3f45d410ad6b478429af835ba4','Chris'    , 'Murphy' , 'cmurphy9', 'M', ''cmurphy9@over-blog.com'  , 
'64-(272)961-0086', 'u/h1tFt9', 'Mosciski LLC', '2 Ludington Point', 'Montreal', 'QC', 'CANADA', 'H2E 2L7',
'empowering', 'Maroon',1,'2020-04-18 00:00:00'); [42000-199]
2020-04-22 22:10:22 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Column "STORE_ID" not found; SQL statement:
insert into categories (id, store_id, description, name, parent_id, position, status, asset) VALUES
(1, 1, null, 'Fruits & Vegetables', null, null, 1,'images/be.jpg'),
(2, 1, null, 'Frozen Veg', null, null, 1,'images/bev.jpg'),
(3, 1, null, 'Beverages', null, null, 1,'images/brand_f.jpg'),
(4, 1, null, 'Brannded Food', 3, null, 1,'images/eggs.jpg'),
(5, 1, null, 'Beauty & Personal Care	', 3, null, 1,'images/frozen.jpg'),
(6, 1, null, 'Home Care & Fashion', 3, null, 1,	images/home.jpg) [42122-199]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:451)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:427)
	at org.h2.message.DbException.get(DbException.java:205)
	at org.h2.message.DbException.get(DbException.java:181)
	at org.h2.table.Table.getColumn(Table.java:708)
	at org.h2.command.Parser.parseColumn(Parser.java:1377)
	at org.h2.command.Parser.parseColumnList(Parser.java:1362)
	at org.h2.command.Parser.parseInsertGivenTable(Parser.java:1731)
	at org.h2.command.Parser.parseInsert(Parser.java:1684)
	at org.h2.command.Parser.parsePrepared(Parser.java:891)
	at org.h2.command.Parser.parse(Parser.java:788)
	at org.h2.command.Parser.parse(Parser.java:760)
	at org.h2.command.Parser.prepareCommand(Parser.java:683)
	at org.h2.engine.Session.prepareLocal(Session.java:627)
	at org.h2.engine.Session.prepareCommand(Session.java:565)
	at org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1292)
	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:217)
	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:1113)
	at org.h2.server.web.WebApp.getResult(WebApp.java:1436)
	at org.h2.server.web.WebApp.query(WebApp.java:1111)
	at org.h2.server.web.WebApp$1.next(WebApp.java:1073)
	at org.h2.server.web.WebApp$1.next(WebApp.java:1060)
	at org.h2.server.web.WebThread.process(WebThread.java:173)
	at org.h2.server.web.WebThread.run(WebThread.java:93)
	at java.lang.Thread.run(Unknown Source)
2020-04-22 22:10:22 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "(7[*], 1, NULL, 'Non Veg', 3, NULL, 1,'images/nonveg.jpg') "; expected "(, WITH, SELECT, FROM, TABLE, VALUES"; SQL statement:
(7, 1, null, 'Non Veg', 3, null, 1,'images/nonveg.jpg') [42001-199]
2020-04-22 22:10:22 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "(8[*], 1, NULL, 'Dairy, Bakery & Eggs', 3, NULL, 1,IMAGES/VEG.JPG) "; expected "(, WITH, SELECT, FROM, TABLE, VALUES"; SQL statement:
(8, 1, null, 'Dairy, Bakery & Eggs', 3, null, 1,images/veg.jpg) [42001-199]
2020-04-22 22:10:42 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Column "IMAGES" not found; SQL statement:
insert into categories (id, company_id, description, name, parent_id, position, status, asset) VALUES
(1, 1, null, 'Fruits & Vegetables', null, null, 1,'images/be.jpg'),
(2, 1, null, 'Frozen Veg', null, null, 1,'images/bev.jpg'),
(3, 1, null, 'Beverages', null, null, 1,'images/brand_f.jpg'),
(4, 1, null, 'Brannded Food', 3, null, 1,'images/eggs.jpg'),
(5, 1, null, 'Beauty & Personal Care	', 3, null, 1,'images/frozen.jpg'),
(6, 1, null, 'Home Care & Fashion', 3, null, 1,	images/home.jpg) [42122-199]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:451)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:427)
	at org.h2.message.DbException.get(DbException.java:205)
	at org.h2.message.DbException.get(DbException.java:181)
	at org.h2.expression.ExpressionColumn.getColumnException(ExpressionColumn.java:176)
	at org.h2.expression.ExpressionColumn.optimize(ExpressionColumn.java:158)
	at org.h2.expression.BinaryOperation.optimize(BinaryOperation.java:163)
	at org.h2.command.dml.Insert.prepare(Insert.java:322)
	at org.h2.command.Parser.prepareCommand(Parser.java:689)
	at org.h2.engine.Session.prepareLocal(Session.java:627)
	at org.h2.engine.Session.prepareCommand(Session.java:565)
	at org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1292)
	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:217)
	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:1113)
	at org.h2.server.web.WebApp.getResult(WebApp.java:1436)
	at org.h2.server.web.WebApp.query(WebApp.java:1111)
	at org.h2.server.web.WebApp$1.next(WebApp.java:1073)
	at org.h2.server.web.WebApp$1.next(WebApp.java:1060)
	at org.h2.server.web.WebThread.process(WebThread.java:173)
	at org.h2.server.web.WebThread.run(WebThread.java:93)
	at java.lang.Thread.run(Unknown Source)
2020-04-22 22:10:42 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "(7[*], 1, NULL, 'Non Veg', 3, NULL, 1,'images/nonveg.jpg') "; expected "(, WITH, SELECT, FROM, TABLE, VALUES"; SQL statement:
(7, 1, null, 'Non Veg', 3, null, 1,'images/nonveg.jpg') [42001-199]
2020-04-22 22:10:42 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "(8[*], 1, NULL, 'Dairy, Bakery & Eggs', 3, NULL, 1,IMAGES/VEG.JPG) "; expected "(, WITH, SELECT, FROM, TABLE, VALUES"; SQL statement:
(8, 1, null, 'Dairy, Bakery & Eggs', 3, null, 1,images/veg.jpg) [42001-199]
2020-04-22 22:12:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Column "DEFAULT_IMAGE" not found; SQL statement:
insert into categories (id, company_id, description, name, parent_id, position, status, default_image) VALUES
(1, 1, null, 'Fruits & Vegetables', null, null, 1,'images/be.jpg'),
(2, 1, null, 'Frozen Veg', null, null, 1,'images/bev.jpg'),
(3, 1, null, 'Beverages', null, null, 1,'images/brand_f.jpg'),
(4, 1, null, 'Brannded Food', 3, null, 1,'images/eggs.jpg'),
(5, 1, null, 'Beauty & Personal Care	', 3, null, 1,'images/frozen.jpg'),
(6, 1, null, 'Home Care & Fashion', 3, null, 1,	images/home.jpg) [42122-199]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:451)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:427)
	at org.h2.message.DbException.get(DbException.java:205)
	at org.h2.message.DbException.get(DbException.java:181)
	at org.h2.table.Table.getColumn(Table.java:708)
	at org.h2.command.Parser.parseColumn(Parser.java:1377)
	at org.h2.command.Parser.parseColumnList(Parser.java:1362)
	at org.h2.command.Parser.parseInsertGivenTable(Parser.java:1731)
	at org.h2.command.Parser.parseInsert(Parser.java:1684)
	at org.h2.command.Parser.parsePrepared(Parser.java:891)
	at org.h2.command.Parser.parse(Parser.java:788)
	at org.h2.command.Parser.parse(Parser.java:760)
	at org.h2.command.Parser.prepareCommand(Parser.java:683)
	at org.h2.engine.Session.prepareLocal(Session.java:627)
	at org.h2.engine.Session.prepareCommand(Session.java:565)
	at org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1292)
	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:217)
	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:1113)
	at org.h2.server.web.WebApp.getResult(WebApp.java:1436)
	at org.h2.server.web.WebApp.query(WebApp.java:1111)
	at org.h2.server.web.WebApp$1.next(WebApp.java:1073)
	at org.h2.server.web.WebApp$1.next(WebApp.java:1060)
	at org.h2.server.web.WebThread.process(WebThread.java:173)
	at org.h2.server.web.WebThread.run(WebThread.java:93)
	at java.lang.Thread.run(Unknown Source)
2020-04-22 22:12:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "(7[*], 1, NULL, 'Non Veg', 3, NULL, 1,'images/nonveg.jpg') "; expected "(, WITH, SELECT, FROM, TABLE, VALUES"; SQL statement:
(7, 1, null, 'Non Veg', 3, null, 1,'images/nonveg.jpg') [42001-199]
2020-04-22 22:12:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "(8[*], 1, NULL, 'Dairy, Bakery & Eggs', 3, NULL, 1,IMAGES/VEG.JPG) "; expected "(, WITH, SELECT, FROM, TABLE, VALUES"; SQL statement:
(8, 1, null, 'Dairy, Bakery & Eggs', 3, null, 1,images/veg.jpg) [42001-199]
2020-04-22 22:12:44 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Column "IMAGES" not found; SQL statement:
insert into categories (id, company_id, description, name, parent_id, position, status, default_image) VALUES
(1, 1, null, 'Fruits & Vegetables', null, null, 1,'images/be.jpg'),
(2, 1, null, 'Frozen Veg', null, null, 1,'images/bev.jpg'),
(3, 1, null, 'Beverages', null, null, 1,'images/brand_f.jpg'),
(4, 1, null, 'Brannded Food', 3, null, 1,'images/eggs.jpg'),
(5, 1, null, 'Beauty & Personal Care	', 3, null, 1,'images/frozen.jpg'),
(6, 1, null, 'Home Care & Fashion', 3, null, 1,	images/home.jpg) [42122-199]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:451)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:427)
	at org.h2.message.DbException.get(DbException.java:205)
	at org.h2.message.DbException.get(DbException.java:181)
	at org.h2.expression.ExpressionColumn.getColumnException(ExpressionColumn.java:176)
	at org.h2.expression.ExpressionColumn.optimize(ExpressionColumn.java:158)
	at org.h2.expression.BinaryOperation.optimize(BinaryOperation.java:163)
	at org.h2.command.dml.Insert.prepare(Insert.java:322)
	at org.h2.command.Parser.prepareCommand(Parser.java:689)
	at org.h2.engine.Session.prepareLocal(Session.java:627)
	at org.h2.engine.Session.prepareCommand(Session.java:565)
	at org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1292)
	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:217)
	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:1113)
	at org.h2.server.web.WebApp.getResult(WebApp.java:1436)
	at org.h2.server.web.WebApp.query(WebApp.java:1111)
	at org.h2.server.web.WebApp$1.next(WebApp.java:1073)
	at org.h2.server.web.WebApp$1.next(WebApp.java:1060)
	at org.h2.server.web.WebThread.process(WebThread.java:173)
	at org.h2.server.web.WebThread.run(WebThread.java:93)
	at java.lang.Thread.run(Unknown Source)
2020-04-22 22:12:44 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "(7[*], 1, NULL, 'Non Veg', 3, NULL, 1,'images/nonveg.jpg') "; expected "(, WITH, SELECT, FROM, TABLE, VALUES"; SQL statement:
(7, 1, null, 'Non Veg', 3, null, 1,'images/nonveg.jpg') [42001-199]
2020-04-22 22:12:44 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "(8[*], 1, NULL, 'Dairy, Bakery & Eggs', 3, NULL, 1,IMAGES/VEG.JPG) "; expected "(, WITH, SELECT, FROM, TABLE, VALUES"; SQL statement:
(8, 1, null, 'Dairy, Bakery & Eggs', 3, null, 1,images/veg.jpg) [42001-199]
2020-04-22 22:13:30 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Column "IMAGES" not found; SQL statement:
insert into categories (id, company_id, description, name, parent_id, position, status, default_image) VALUES
(1, 1, null, 'Fruits & Vegetables', null, null, 1,'images/be.jpg'),
(2, 1, null, 'Frozen Veg', null, null, 1,'images/bev.jpg'),
(3, 1, null, 'Beverages', null, null, 1,'images/brand_f.jpg'),
(4, 1, null, 'Brannded Food', 3, null, 1,'images/eggs.jpg'),
(5, 1, null, 'Beauty & Personal Care', 3, null, 1,'images/frozen.jpg'),
(6, 1, null, 'Home Care & Fashion', 3, null, 1,	images/home.jpg) [42122-199]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:451)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:427)
	at org.h2.message.DbException.get(DbException.java:205)
	at org.h2.message.DbException.get(DbException.java:181)
	at org.h2.expression.ExpressionColumn.getColumnException(ExpressionColumn.java:176)
	at org.h2.expression.ExpressionColumn.optimize(ExpressionColumn.java:158)
	at org.h2.expression.BinaryOperation.optimize(BinaryOperation.java:163)
	at org.h2.command.dml.Insert.prepare(Insert.java:322)
	at org.h2.command.Parser.prepareCommand(Parser.java:689)
	at org.h2.engine.Session.prepareLocal(Session.java:627)
	at org.h2.engine.Session.prepareCommand(Session.java:565)
	at org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1292)
	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:217)
	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:1113)
	at org.h2.server.web.WebApp.getResult(WebApp.java:1436)
	at org.h2.server.web.WebApp.query(WebApp.java:1111)
	at org.h2.server.web.WebApp$1.next(WebApp.java:1073)
	at org.h2.server.web.WebApp$1.next(WebApp.java:1060)
	at org.h2.server.web.WebThread.process(WebThread.java:173)
	at org.h2.server.web.WebThread.run(WebThread.java:93)
	at java.lang.Thread.run(Unknown Source)
2020-04-22 22:13:30 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "(7[*], 1, NULL, 'Non Veg', 3, NULL, 1,'images/nonveg.jpg') "; expected "(, WITH, SELECT, FROM, TABLE, VALUES"; SQL statement:
(7, 1, null, 'Non Veg', 3, null, 1,'images/nonveg.jpg') [42001-199]
2020-04-22 22:13:30 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "(8[*], 1, NULL, 'Dairy, Bakery & Eggs', 3, NULL, 1,'images/veg.jpg') "; expected "(, WITH, SELECT, FROM, TABLE, VALUES"; SQL statement:
(8, 1, null, 'Dairy, Bakery & Eggs', 3, null, 1,'images/veg.jpg') [42001-199]
2020-04-22 22:13:39 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "insert into categories (id, company_id, description, name, parent_id, position, status, default_image) VALUES
(1, 1, null, 'Fruits & Vegetables', null, null, 1,'images/be.jpg'),
(2, 1, null, 'Frozen Veg', null, null, 1,'images/bev.jpg'),
(3, 1, null, 'Beverages', null, null, 1,'images/brand_f.jpg'),
(4, 1, null, 'Brannded Food', 3, null, 1,'images/eggs.jpg'),
(5, 1, null, 'Beauty & Personal Care', 3, null, 1,'images/frozen.jpg'),
(6, 1, null, 'Home Care & Fashion', 3, null, 1,	'images/home.jpg);
(7, 1, null, 'Non Veg', 3, null, 1,'images/nonveg.jpg');
(8, 1, null, 'Dairy, Bakery & Eggs', 3, null, 1,'images/veg.jpg[*]');"; SQL statement:
insert into categories (id, company_id, description, name, parent_id, position, status, default_image) VALUES
(1, 1, null, 'Fruits & Vegetables', null, null, 1,'images/be.jpg'),
(2, 1, null, 'Frozen Veg', null, null, 1,'images/bev.jpg'),
(3, 1, null, 'Beverages', null, null, 1,'images/brand_f.jpg'),
(4, 1, null, 'Brannded Food', 3, null, 1,'images/eggs.jpg'),
(5, 1, null, 'Beauty & Personal Care', 3, null, 1,'images/frozen.jpg'),
(6, 1, null, 'Home Care & Fashion', 3, null, 1,	'images/home.jpg);
(7, 1, null, 'Non Veg', 3, null, 1,'images/nonveg.jpg');
(8, 1, null, 'Dairy, Bakery & Eggs', 3, null, 1,'images/veg.jpg'); [42000-199]
2020-04-22 22:14:29 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "(7[*], 1, NULL, 'Non Veg', 3, NULL, 1,'images/nonveg.jpg') "; expected "(, WITH, SELECT, FROM, TABLE, VALUES"; SQL statement:
(7, 1, null, 'Non Veg', 3, null, 1,'images/nonveg.jpg') [42001-199]
2020-04-22 22:14:29 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "(8[*], 1, NULL, 'Dairy, Bakery & Eggs', 3, NULL, 1,'images/veg.jpg') "; expected "(, WITH, SELECT, FROM, TABLE, VALUES"; SQL statement:
(8, 1, null, 'Dairy, Bakery & Eggs', 3, null, 1,'images/veg.jpg') [42001-199]
2020-04-23 14:22:08 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "CREATE TABLE
                ORDERS
                (
                        ID                INT NOT NULL                       ,
                        USER_ID           INT                                ,
                        COMPANY_ID        INT ADDRESS_ID[*] INT                 ,
                        ORDER_DATE        DATETIME                           ,
                        SHIPPED_DATE      DATETIME                           ,
                        DELIVERY_FEE      DECIMAL(19,4) NULL DEFAULT '0.0000',
                        PAYMENT_TYPE      VARCHAR(50)                        ,
                        PAID_DATE         DATETIME                           ,
                        IS_VIRTUAL        SMALLINT(6)                        ,
                        IS_CHANGED        INT(11)                            ,
                        IS_MULTI_SHIPPING SMALLINT(6)                        ,
                        ITEMS_COUNT       INT(11) DEFAULT NULL               ,
                        ITEMS_QUANTITY    DECIMAL(19,2) NULL DEFAULT '0.0000',
                        REMOTE_IP         VARCHAR(255)                       ,
                        ORDER_STATUS      VARCHAR(25)                        ,
                        BASE_GRAND_TOTAL  DECIMAL(19,2)                      ,
                        BASE_SUBTOTAL     DECIMAL(19,2) DEFAULT NULL         ,
                        CHECKOUT_COMMENT  VARCHAR(255)                       ,
                        SUBTOTAL          DECIMAL(19,2) NULL DEFAULT '0.0000',
                        UPDATED_AT        DATETIME DEFAULT NULL              ,
                        PRIMARY KEY (ID)
                ) "; expected "(, FOR, UNSIGNED, INVISIBLE, VISIBLE, NOT, NULL, AS, DEFAULT, GENERATED, ON, NOT, NULL, AUTO_INCREMENT, BIGSERIAL, SERIAL, IDENTITY, NULL_TO_DEFAULT, SEQUENCE, SELECTIVITY, COMMENT, CONSTRAINT, PRIMARY, UNIQUE, NOT, NULL, CHECK, REFERENCES, ,, )"; SQL statement:
CREATE TABLE
                orders
                (
                        id                INT NOT NULL                       ,
                        user_id           INT                                ,
                        company_id        INT address_id INT                 ,
                        order_date        DATETIME                           ,
                        shipped_date      DATETIME                           ,
                        delivery_fee      DECIMAL(19,4) NULL DEFAULT '0.0000',
                        payment_type      VARCHAR(50)                        ,
                        paid_date         DATETIME                           ,
                        is_virtual        SMALLINT(6)                        ,
                        is_changed        INT(11)                            ,
                        is_multi_shipping SMALLINT(6)                        ,
                        items_count       INT(11) DEFAULT NULL               ,
                        items_quantity    DECIMAL(19,2) NULL DEFAULT '0.0000',
                        remote_ip         VARCHAR(255)                       ,
                        order_status      VARCHAR(25)                        ,
                        base_grand_total  DECIMAL(19,2)                      ,
                        base_subtotal     DECIMAL(19,2) DEFAULT NULL         ,
                        checkout_comment  VARCHAR(255)                       ,
                        subtotal          DECIMAL(19,2) NULL DEFAULT '0.0000',
                        updated_at        DATETIME DEFAULT NULL              ,
                        PRIMARY KEY (id)
                ) [42001-199]
2020-04-23 14:28:38 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Column count does not match; SQL statement:
insert into orders (id, user_id, company_id, order_date, shipped_date, delivery_fee, paid_date, payment_type,  is_virtual, is_changed, is_multi_shipping, items_count, 
items_quantity, remote_ip, order_status, base_grand_total, base_subtotal, checkout_comment, subtotal, updated_at) values
  
 
 (1, 3, 1, '2020-04-05', '2020-04-06', '2020-04-06', 8.14, 'Credit Card', 0, 0, 0, 4, 2, '01.02.03', '2016-10-12', 'On Hold', 123.3,11.3,11.2,null,122.65,null) [21002-199]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:451)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:427)
	at org.h2.message.DbException.get(DbException.java:205)
	at org.h2.message.DbException.get(DbException.java:181)
	at org.h2.message.DbException.get(DbException.java:170)
	at org.h2.command.dml.Insert.prepare(Insert.java:314)
	at org.h2.command.Parser.prepareCommand(Parser.java:689)
	at org.h2.engine.Session.prepareLocal(Session.java:627)
	at org.h2.engine.Session.prepareCommand(Session.java:565)
	at org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1292)
	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:217)
	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:1113)
	at org.h2.server.web.WebApp.getResult(WebApp.java:1436)
	at org.h2.server.web.WebApp.query(WebApp.java:1111)
	at org.h2.server.web.WebApp$1.next(WebApp.java:1073)
	at org.h2.server.web.WebApp$1.next(WebApp.java:1060)
	at org.h2.server.web.WebThread.process(WebThread.java:173)
	at org.h2.server.web.WebThread.run(WebThread.java:93)
	at java.lang.Thread.run(Unknown Source)
2020-04-23 14:51:27 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "CREATE TABLE
                USER_ROLES
                (
                        ID      INT NOT NULL    ,
                        USER_ID INT ROLE_ID[*] INT ,
                        PRIMARY KEY (USER_ID, ROLE_ID)
                ) "; expected "(, FOR, UNSIGNED, INVISIBLE, VISIBLE, NOT, NULL, AS, DEFAULT, GENERATED, ON, NOT, NULL, AUTO_INCREMENT, BIGSERIAL, SERIAL, IDENTITY, NULL_TO_DEFAULT, SEQUENCE, SELECTIVITY, COMMENT, CONSTRAINT, PRIMARY, UNIQUE, NOT, NULL, CHECK, REFERENCES, ,, )"; SQL statement:
CREATE TABLE
                user_roles
                (
                        id      INT NOT NULL    ,
                        user_id INT role_id INT ,
                        PRIMARY KEY (user_id, role_id)
                ) [42001-199]
2020-04-23 14:59:30 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Duplicate column name "LIST_PRICE"; SQL statement:
CREATE TABLE
                products
                (
                        id                       INT NOT NULL                           ,
                        suppliers_id               INT NOT NULL                           ,
                        category_id              INT NOT NULL                           ,
                        product_code             VARCHAR(25)                            ,
                        name                     VARCHAR(255)                           ,
                        overview                 VARCHAR(255)                           ,
                        browsing_name            VARCHAR(255)                           ,
                        description              VARCHAR(250)                           ,
                        standard_cost            DECIMAL(19,4) NULL DEFAULT '0.0000'    ,
                        list_price               DECIMAL(19,4) NOT NULL DEFAULT '0.0000',
                        target_level             INT                                    ,
                        reorder_level            INT                                    ,
                        minimum_reorder_quantity INT                                    ,
                        quantity_per_unit        VARCHAR(50)                            ,
                        discontinued             TINYINT NULL DEFAULT '0'               ,
                        default_image            VARCHAR(255)                           ,
                        list_price DOUBLE NULL DEFAULT '0.0000'                         ,
                        created_on DATETIME                                             ,
                        rank       INT(11) NOT NULL                                     ,
                        sale_price DOUBLE                                               ,
                        sku        VARCHAR(255)                                                ,
                        status     INT(11)                                                     ,
                        updated_on DATETIME                                                    ,
                        PRIMARY KEY (id)
                ) [42121-199]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:451)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:427)
	at org.h2.message.DbException.get(DbException.java:205)
	at org.h2.message.DbException.get(DbException.java:181)
	at org.h2.table.Table.setColumns(Table.java:447)
	at org.h2.table.TableBase.<init>(TableBase.java:75)
	at org.h2.table.RegularTable.<init>(RegularTable.java:126)
	at org.h2.mvstore.db.MVTable.<init>(MVTable.java:113)
	at org.h2.mvstore.db.MVTableEngine$Store.createTable(MVTableEngine.java:236)
	at org.h2.mvstore.db.MVTableEngine.createTable(MVTableEngine.java:119)
	at org.h2.mvstore.db.MVTableEngine.createTable(MVTableEngine.java:42)
	at org.h2.schema.Schema.createTable(Schema.java:706)
	at org.h2.command.ddl.CreateTable.update(CreateTable.java:107)
	at org.h2.command.CommandContainer.update(CommandContainer.java:133)
	at org.h2.command.Command.executeUpdate(Command.java:267)
	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:233)
	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:1113)
	at org.h2.server.web.WebApp.getResult(WebApp.java:1436)
	at org.h2.server.web.WebApp.query(WebApp.java:1111)
	at org.h2.server.web.WebApp$1.next(WebApp.java:1073)
	at org.h2.server.web.WebApp$1.next(WebApp.java:1060)
	at org.h2.server.web.WebThread.process(WebThread.java:173)
	at org.h2.server.web.WebThread.run(WebThread.java:93)
	at java.lang.Thread.run(Unknown Source)
2020-04-23 15:04:17 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "CREATE TABLE
                PRODUCTS
                (
                        ID                       INT NOT NULL                           ,                      ,[*]
                        CATEGORY_ID              INT NOT NULL                           ,
                        PRODUCT_CODE             VARCHAR(25)                            ,
                        NAME                     VARCHAR(255)                           ,
                        OVERVIEW                 VARCHAR(255)                           ,
                        BROWSING_NAME            VARCHAR(255)                           ,
                        DESCRIPTION              VARCHAR(250)                           ,
                        STANDARD_COST            DECIMAL(19,4) NULL DEFAULT '0.0000'    ,
                        LIST_PRICE               DECIMAL(19,4) NOT NULL DEFAULT '0.0000',
                        TARGET_LEVEL             INT                                    ,
                        REORDER_LEVEL            INT                                    ,
                        MINIMUM_REORDER_QUANTITY INT                                    ,
                        QUANTITY_PER_UNIT        VARCHAR(50)                            ,
                        DISCONTINUED             TINYINT NULL DEFAULT '0'               ,
                        DEFAULT_IMAGE            VARCHAR(255)                           ,
                        LIST_PRICE DOUBLE NULL DEFAULT '0.0000'                         ,
                        CREATED_ON DATETIME                                             ,
                        RANK       INT(11) NOT NULL                                     ,
                        SALE_PRICE DOUBLE                                               ,
                        SKU        VARCHAR(255)                                                ,
                        STATUS     INT(11)                                                     ,
                        UPDATED_ON DATETIME                                                    ,
                        PRIMARY KEY (ID)
                ) "; expected "identifier"; SQL statement:
CREATE TABLE
                products
                (
                        id                       INT NOT NULL                           ,                      ,
                        category_id              INT NOT NULL                           ,
                        product_code             VARCHAR(25)                            ,
                        name                     VARCHAR(255)                           ,
                        overview                 VARCHAR(255)                           ,
                        browsing_name            VARCHAR(255)                           ,
                        description              VARCHAR(250)                           ,
                        standard_cost            DECIMAL(19,4) NULL DEFAULT '0.0000'    ,
                        list_price               DECIMAL(19,4) NOT NULL DEFAULT '0.0000',
                        target_level             INT                                    ,
                        reorder_level            INT                                    ,
                        minimum_reorder_quantity INT                                    ,
                        quantity_per_unit        VARCHAR(50)                            ,
                        discontinued             TINYINT NULL DEFAULT '0'               ,
                        default_image            VARCHAR(255)                           ,
                        list_price DOUBLE NULL DEFAULT '0.0000'                         ,
                        created_on DATETIME                                             ,
                        rank       INT(11) NOT NULL                                     ,
                        sale_price DOUBLE                                               ,
                        sku        VARCHAR(255)                                                ,
                        status     INT(11)                                                     ,
                        updated_on DATETIME                                                    ,
                        PRIMARY KEY (id)
                ) [42001-199]
2020-04-23 15:05:23 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Duplicate column name "LIST_PRICE"; SQL statement:
CREATE TABLE
                aladin.products
                (
                        id                       INT NOT NULL                           ,
                        category_id              INT NOT NULL                           ,
                        product_code             VARCHAR(25)                            ,
                        name                     VARCHAR(255)                           ,
                        overview                 VARCHAR(255)                           ,
                        browsing_name            VARCHAR(255)                           ,
                        description              VARCHAR(250)                           ,
                        standard_cost            DECIMAL(19,4) NULL DEFAULT '0.0000'    ,
                        list_price               DECIMAL(19,4) NOT NULL DEFAULT '0.0000',
                        target_level             INT                                    ,
                        reorder_level            INT                                    ,
                        minimum_reorder_quantity INT                                    ,
                        quantity_per_unit        VARCHAR(50)                            ,
                        discontinued             TINYINT NULL DEFAULT '0'               ,
                        default_image            VARCHAR(255)                           ,
                        list_price DOUBLE NULL DEFAULT '0.0000'                         ,
                        created_on DATETIME                                             ,
                        rank       INT(11) NOT NULL                                     ,
                        sale_price DOUBLE                                               ,
                        sku        VARCHAR(255)                                                ,
                        status     INT(11)                                                     ,
                        updated_on DATETIME                                                    ,
                        PRIMARY KEY (id)
                ) [42121-199]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:451)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:427)
	at org.h2.message.DbException.get(DbException.java:205)
	at org.h2.message.DbException.get(DbException.java:181)
	at org.h2.table.Table.setColumns(Table.java:447)
	at org.h2.table.TableBase.<init>(TableBase.java:75)
	at org.h2.table.RegularTable.<init>(RegularTable.java:126)
	at org.h2.mvstore.db.MVTable.<init>(MVTable.java:113)
	at org.h2.mvstore.db.MVTableEngine$Store.createTable(MVTableEngine.java:236)
	at org.h2.mvstore.db.MVTableEngine.createTable(MVTableEngine.java:119)
	at org.h2.mvstore.db.MVTableEngine.createTable(MVTableEngine.java:42)
	at org.h2.schema.Schema.createTable(Schema.java:706)
	at org.h2.command.ddl.CreateTable.update(CreateTable.java:107)
	at org.h2.command.CommandContainer.update(CommandContainer.java:133)
	at org.h2.command.Command.executeUpdate(Command.java:267)
	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:233)
	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:1113)
	at org.h2.server.web.WebApp.getResult(WebApp.java:1436)
	at org.h2.server.web.WebApp.query(WebApp.java:1111)
	at org.h2.server.web.WebApp$1.next(WebApp.java:1073)
	at org.h2.server.web.WebApp$1.next(WebApp.java:1060)
	at org.h2.server.web.WebThread.process(WebThread.java:173)
	at org.h2.server.web.WebThread.run(WebThread.java:93)
	at java.lang.Thread.run(Unknown Source)
2020-04-23 15:09:01 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "DROP TABLE TABLE[*]
                ALADIN.PRODUCT_CATEGORIES "; expected "identifier"; SQL statement:
drop table TABLE
                aladin.product_categories [42001-199]
2020-04-23 15:09:09 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "DROP TABLE TABLE[*] ALADIN.PRODUCT_CATEGORIES "; expected "identifier"; SQL statement:
drop table TABLE aladin.product_categories [42001-199]
2020-04-23 15:09:23 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "DROP TABLE TABLE[*] PRODUCT_CATEGORIES "; expected "identifier"; SQL statement:
drop table TABLE product_categories [42001-199]
2020-04-23 15:09:28 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "DROP TABLE TABLE[*] PRODUCT_CATEGORIES "; expected "identifier"; SQL statement:
drop table TABLE PRODUCT_CATEGORIES [42001-199]
2020-04-23 15:11:01 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "CREATE TABLE
                ALADIN.ORDER_PRODUCTS
                (
                        ORDER_ID          INT NOT NULL                           ,
                        PRODUCT_ID        INT CARD_ID[*] INT(11) NOT NULL           ,
                        QUANTITY          DECIMAL(18,4) NOT NULL DEFAULT '0.0000',
                        UNIT_PRICE        DECIMAL(19,4) NULL DEFAULT '0.0000'    ,
                        DISCOUNT          DECIMAL(19,4) NULL DEFAULT '0.0000'    ,
                        ORDER_ITEM_STATUS VARCHAR(25)                            ,
                        DATE_ALLOCATED    DATETIME                               ,
                        PRIMARY KEY (ORDER_ID, PRODUCT_ID)
                ) "; expected "(, FOR, UNSIGNED, INVISIBLE, VISIBLE, NOT, NULL, AS, DEFAULT, GENERATED, ON, NOT, NULL, AUTO_INCREMENT, BIGSERIAL, SERIAL, IDENTITY, NULL_TO_DEFAULT, SEQUENCE, SELECTIVITY, COMMENT, CONSTRAINT, PRIMARY, UNIQUE, NOT, NULL, CHECK, REFERENCES, ,, )"; SQL statement:
CREATE TABLE
                aladin.order_products
                (
                        order_id          INT NOT NULL                           ,
                        product_id        INT card_id INT(11) NOT NULL           ,
                        quantity          DECIMAL(18,4) NOT NULL DEFAULT '0.0000',
                        unit_price        DECIMAL(19,4) NULL DEFAULT '0.0000'    ,
                        discount          DECIMAL(19,4) NULL DEFAULT '0.0000'    ,
                        order_item_status VARCHAR(25)                            ,
                        date_allocated    DATETIME                               ,
                        PRIMARY KEY (order_id, product_id)
                ) [42001-199]
2020-04-23 15:11:34 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "CREATE TABLE
                ALADIN.ORDER_PRODUCTS
                (
                        ORDER_ID          INT NOT NULL                           ,
                        PRODUCT_ID        INT CARD_ID[*] INT(11) NOT NULL           ,
                        QUANTITY          DECIMAL(18,4) NOT NULL DEFAULT '0.0000',
                        UNIT_PRICE        DECIMAL(19,4) NULL DEFAULT '0.0000'    ,
                        DISCOUNT          DECIMAL(19,4) NULL DEFAULT '0.0000'    ,
                        ORDER_ITEM_STATUS VARCHAR(25)                            ,
                        DATE_ALLOCATED    DATETIME                               ,
                        PRIMARY KEY (ORDER_ID, PRODUCT_ID),
                ) "; expected "(, FOR, UNSIGNED, INVISIBLE, VISIBLE, NOT, NULL, AS, DEFAULT, GENERATED, ON, NOT, NULL, AUTO_INCREMENT, BIGSERIAL, SERIAL, IDENTITY, NULL_TO_DEFAULT, SEQUENCE, SELECTIVITY, COMMENT, CONSTRAINT, PRIMARY, UNIQUE, NOT, NULL, CHECK, REFERENCES, ,, )"; SQL statement:
CREATE TABLE
                aladin.order_products
                (
                        order_id          INT NOT NULL                           ,
                        product_id        INT card_id INT(11) NOT NULL           ,
                        quantity          DECIMAL(18,4) NOT NULL DEFAULT '0.0000',
                        unit_price        DECIMAL(19,4) NULL DEFAULT '0.0000'    ,
                        discount          DECIMAL(19,4) NULL DEFAULT '0.0000'    ,
                        order_item_status VARCHAR(25)                            ,
                        date_allocated    DATETIME                               ,
                        PRIMARY KEY (order_id, product_id),
                ) [42001-199]
2020-04-23 15:21:06 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Column "REVIEW_ID" not found; SQL statement:
CREATE TABLE
                reviews
                (
                        id          INT(11) NOT NULL     ,
						  user_id     VARCHAR(255) NOT NULL,
                        
                        company_id  INT(11) NOT NULL     ,
                        product_id  INT(11) NOT NULL     ,
                        rank        INT(11) NOT NULL     ,
                      COMMENT     VARCHAR(255)         ,
                        create_date DATETIME NOT NULL    ,
                        PRIMARY KEY (`review_id`)
                ) [42122-199]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:451)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:427)
	at org.h2.message.DbException.get(DbException.java:205)
	at org.h2.message.DbException.get(DbException.java:181)
	at org.h2.table.Table.getColumn(Table.java:708)
	at org.h2.table.IndexColumn.mapColumns(IndexColumn.java:115)
	at org.h2.command.ddl.AlterTableAddConstraint.tryUpdate(AlterTableAddConstraint.java:123)
	at org.h2.command.ddl.AlterTableAddConstraint.update(AlterTableAddConstraint.java:78)
	at org.h2.command.ddl.CommandWithColumns.createConstraints(CommandWithColumns.java:83)
	at org.h2.command.ddl.CreateTable.update(CreateTable.java:129)
	at org.h2.command.CommandContainer.update(CommandContainer.java:133)
	at org.h2.command.Command.executeUpdate(Command.java:267)
	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:233)
	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:1113)
	at org.h2.server.web.WebApp.getResult(WebApp.java:1436)
	at org.h2.server.web.WebApp.query(WebApp.java:1111)
	at org.h2.server.web.WebApp$1.next(WebApp.java:1073)
	at org.h2.server.web.WebApp$1.next(WebApp.java:1060)
	at org.h2.server.web.WebThread.process(WebThread.java:173)
	at org.h2.server.web.WebThread.run(WebThread.java:93)
	at java.lang.Thread.run(Unknown Source)
2020-04-23 15:21:54 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Column "REVIEW_ID" not found; SQL statement:
CREATE TABLE
                reviews
                (
                        id          INT(11) NOT NULL  ,
                        user_id     INT(11) NOT NULL  ,
                        company_id  INT(11) NOT NULL  ,
                        product_id  INT(11) NOT NULL  ,
                        rank        INT(11) NOT NULL  ,
                        comments    VARCHAR(255)      ,
                        create_date DATETIME NOT NULL ,
                        PRIMARY KEY (`review_id`)
                ) [42122-199]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:451)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:427)
	at org.h2.message.DbException.get(DbException.java:205)
	at org.h2.message.DbException.get(DbException.java:181)
	at org.h2.table.Table.getColumn(Table.java:708)
	at org.h2.table.IndexColumn.mapColumns(IndexColumn.java:115)
	at org.h2.command.ddl.AlterTableAddConstraint.tryUpdate(AlterTableAddConstraint.java:123)
	at org.h2.command.ddl.AlterTableAddConstraint.update(AlterTableAddConstraint.java:78)
	at org.h2.command.ddl.CommandWithColumns.createConstraints(CommandWithColumns.java:83)
	at org.h2.command.ddl.CreateTable.update(CreateTable.java:129)
	at org.h2.command.CommandContainer.update(CommandContainer.java:133)
	at org.h2.command.Command.executeUpdate(Command.java:267)
	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:233)
	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:1113)
	at org.h2.server.web.WebApp.getResult(WebApp.java:1436)
	at org.h2.server.web.WebApp.query(WebApp.java:1111)
	at org.h2.server.web.WebApp$1.next(WebApp.java:1073)
	at org.h2.server.web.WebApp$1.next(WebApp.java:1060)
	at org.h2.server.web.WebThread.process(WebThread.java:173)
	at org.h2.server.web.WebThread.run(WebThread.java:93)
	at java.lang.Thread.run(Unknown Source)
2020-04-23 15:46:52 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Table "ORDER_REPORTS" already exists; SQL statement:
CREATE TABLE
                aladin.order_reports
                (
                        id       INT(11) NOT NULL,
                        order_id INT(11) NOT NULL,
                        note     VARCHAR(255)    ,
                        status   BIT(1) NOT NULL ,
                        PRIMARY KEY (id)
                ) [42101-199]
2020-04-23 15:56:29 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "ALTER TABLE ALADIN.ORDER_PAYMENTS _REPORTS[*]   ADD CONSTRAINT FK_PAYMENTS__ORDERS FOREIGN KEY (PAYMENT_ID) REFERENCES ALADIN.PAYMENTS    (ID) "; expected "ADD, SET, RENAME, DROP, CHANGE, MODIFY, ALTER"; SQL statement:
ALTER TABLE ALADIN.ORDER_PAYMENTS _REPORTS   ADD CONSTRAINT fk_payments__orders FOREIGN KEY (payment_id) REFERENCES ALADIN.PAYMENTS    (id) [42001-199]
2020-04-23 15:56:29 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "ALTER TABLE ALADIN.ORDER_PAYMENTS _REPORTS[*]   ADD CONSTRAINT FK_ORDERS__PAYMENTS FOREIGN KEY (ORDER_ID) REFERENCES ALADIN.ORDERS     (ID) "; expected "ADD, SET, RENAME, DROP, CHANGE, MODIFY, ALTER"; SQL statement:
ALTER TABLE ALADIN.ORDER_PAYMENTS _REPORTS   ADD CONSTRAINT fk_orders__payments FOREIGN KEY (order_id) REFERENCES ALADIN.ORDERS     (id) [42001-199]
2020-04-23 16:37:39 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "INSERT INTO ALADIN.CATEGORIES (ID, COMPANY_ID, PARENT_ID, DESCRIPTION, NAME,  POSITION, STATUS, DEFAULT_IMAGE) VALUES
(1, 1,2, NULL, 'Fruits & Vegetables', NULL, NULL, 1,'images/be.jpg'),
(2, 1,NULL, NULL, 'Frozen Veg', NULL, NULL, 1,'images/bev.jpg'),
(3, 1, 5,NULL, 'Beverages', NULL, NULL, 1,'images/brand_f.jpg'),
(4, 1, 2, NULL, 'Brannded Food', 3, NULL, 1,'images/eggs.jpg'),
(5, 1, 1,NULL, 'Beauty & Personal Care	', 3, NULL, 1,'images/frozen.jpg'),
(6, 1, 1 NULL[*], 'Home Care & Fashion', 3, NULL, 1,	'images/home.jpg').
(7, 1, 4,NULL, 'Non Veg', 3, NULL, 1,'images/nonveg.jpg'),
(8, 1,3, NULL, 'Dairy, Bakery & Eggs', 3, NULL, 1, 'images/veg.jpg') "; expected "[, ::, *, /, %, +, -, ||, ~, !~, NOT, LIKE, ILIKE, REGEXP, IS, IN, BETWEEN, AND, OR, ,, )"; SQL statement:
insert into ALADIN.CATEGORIES (id, company_id, parent_id, description, name,  position, status, default_image) VALUES
(1, 1,2, null, 'Fruits & Vegetables', null, null, 1,'images/be.jpg'),
(2, 1,null, null, 'Frozen Veg', null, null, 1,'images/bev.jpg'),
(3, 1, 5,null, 'Beverages', null, null, 1,'images/brand_f.jpg'),
(4, 1, 2, null, 'Brannded Food', 3, null, 1,'images/eggs.jpg'),
(5, 1, 1,null, 'Beauty & Personal Care	', 3, null, 1,'images/frozen.jpg'),
(6, 1, 1 null, 'Home Care & Fashion', 3, null, 1,	'images/home.jpg').
(7, 1, 4,null, 'Non Veg', 3, null, 1,'images/nonveg.jpg'),
(8, 1,3, null, 'Dairy, Bakery & Eggs', 3, null, 1, 'images/veg.jpg') [42001-199]
2020-04-23 16:39:56 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "INSERT INTO ALADIN.CATEGORIES (ID, COMPANY_ID, PARENT_ID, DESCRIPTION, NAME,  POSITION, STATUS, DEFAULT_IMAGE) VALUES
(1, 1,2, NULL, 'Fruits & Vegetables', NULL, NULL, 1,'images/be.jpg'), [*]"; expected "ROW, (, DEFAULT, NOT, EXISTS, INTERSECTS"; SQL statement:
insert into ALADIN.CATEGORIES (id, company_id, parent_id, description, name,  position, status, default_image) VALUES
(1, 1,2, null, 'Fruits & Vegetables', null, null, 1,'images/be.jpg'), [42001-199]
2020-04-23 16:40:20 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "INSERT INTO ALADIN.CATEGORIES (ID, COMPANY_ID, PARENT_ID, DESCRIPTION, NAME,  POSITION, STATUS, DEFAULT_IMAGE) VALUES
(1, 1,2, NULL, 'Fruits & Vegetables', NULL, 1,'images/be.jpg'), [*]"; expected "ROW, (, DEFAULT, NOT, EXISTS, INTERSECTS"; SQL statement:
insert into ALADIN.CATEGORIES (id, company_id, parent_id, description, name,  position, status, default_image) VALUES
(1, 1,2, null, 'Fruits & Vegetables', null, 1,'images/be.jpg'), [42001-199]
2020-04-23 16:40:34 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Column count does not match; SQL statement:
INSERT INTO
                ALADIN.CATEGORIES
                (
                        id         ,
                        company_id ,
                        parent_id  ,
                        description,
                        name       ,
                        position   ,
                        status     ,
                        default_image
                )
                VALUES
                (
                        1                    ,
                        1                    ,
                        2                    ,
                        NULL                 ,
                        'Fruits & Vegetables',
                        NULL                 ,
                        NULL                 ,
                        1                    ,
                        'images/be.jpg'
                ) [21002-199]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:451)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:427)
	at org.h2.message.DbException.get(DbException.java:205)
	at org.h2.message.DbException.get(DbException.java:181)
	at org.h2.message.DbException.get(DbException.java:170)
	at org.h2.command.dml.Insert.prepare(Insert.java:314)
	at org.h2.command.Parser.prepareCommand(Parser.java:689)
	at org.h2.engine.Session.prepareLocal(Session.java:627)
	at org.h2.engine.Session.prepareCommand(Session.java:565)
	at org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1292)
	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:217)
	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:1113)
	at org.h2.server.web.WebApp.getResult(WebApp.java:1436)
	at org.h2.server.web.WebApp.query(WebApp.java:1111)
	at org.h2.server.web.WebApp$1.next(WebApp.java:1073)
	at org.h2.server.web.WebApp$1.next(WebApp.java:1060)
	at org.h2.server.web.WebThread.process(WebThread.java:173)
	at org.h2.server.web.WebThread.run(WebThread.java:93)
	at java.lang.Thread.run(Unknown Source)
2020-04-23 16:43:48 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "INSERT INTO
                ALADIN.CATEGORIES
                (
                        ID         ,
                        COMPANY_ID ,
                        PARENT_ID  ,
                        DESCRIPTION,
                        NAME       ,
                        POSITION   ,
                        STATUS     ,
                        DEFAULT_IMAGE,
                )
                VALUES
              
                 (
                        3          ,
                        1          ,
                        5          ,
                        NULL       ,
                        'Beverages',
                        NULL       ,
                        1          ,
                        'images/brand_f.jpg'
                )
                ,
                (
                        4              ,
                        1              ,
                        2              ,
                        NULL           ,
                        'Brannded Food',
                        3              ,
 
                        1              ,
                        'images/eggs.jpg'
                )
                ,
                (
                        5                        ,
                        1                        ,
                        1                        ,
                        NULL                     ,
                        'Beauty & Personal Care	',
                        3                        ,
                        1                        ,
                        'images/frozen.jpg'
                )
                ,
                (
                        6                    ,
                        1                    ,
                        1 NULL[*]               ,
                        'Home Care & Fashion',
                        3                    ,
                        1                    ,
                        'images/home.jpg'
                )
                .
                (
                        7        ,
                        1        ,
                        4        ,
                        NULL     ,
                        'Non Veg',
                        3        ,
                        1        ,
                        'images/nonveg.jpg'
                )
                ,
                (
                        8                     ,
                        1                     ,
                        3                     ,
                        NULL                  ,
                        'Dairy, Bakery & Eggs',
                        3                     ,
                        1                     ,
                        'images/veg.jpg'
                ) "; expected "[, ::, *, /, %, +, -, ||, ~, !~, NOT, LIKE, ILIKE, REGEXP, IS, IN, BETWEEN, AND, OR, ,, )"; SQL statement:
INSERT INTO
                ALADIN.CATEGORIES
                (
                        id         ,
                        company_id ,
                        parent_id  ,
                        description,
                        name       ,
                        position   ,
                        status     ,
                        default_image,
                )
                VALUES
              
                 (
                        3          ,
                        1          ,
                        5          ,
                        NULL       ,
                        'Beverages',
                        NULL       ,
                        1          ,
                        'images/brand_f.jpg'
                )
                ,
                (
                        4              ,
                        1              ,
                        2              ,
                        NULL           ,
                        'Brannded Food',
                        3              ,
 
                        1              ,
                        'images/eggs.jpg'
                )
                ,
                (
                        5                        ,
                        1                        ,
                        1                        ,
                        NULL                     ,
                        'Beauty & Personal Care	',
                        3                        ,
                        1                        ,
                        'images/frozen.jpg'
                )
                ,
                (
                        6                    ,
                        1                    ,
                        1 NULL               ,
                        'Home Care & Fashion',
                        3                    ,
                        1                    ,
                        'images/home.jpg'
                )
                .
                (
                        7        ,
                        1        ,
                        4        ,
                        NULL     ,
                        'Non Veg',
                        3        ,
                        1        ,
                        'images/nonveg.jpg'
                )
                ,
                (
                        8                     ,
                        1                     ,
                        3                     ,
                        NULL                  ,
                        'Dairy, Bakery & Eggs',
                        3                     ,
                        1                     ,
                        'images/veg.jpg'
                ) [42001-199]
2020-04-23 16:44:28 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "INSERT INTO
                ALADIN.CATEGORIES
                (
                        ID         ,
                        COMPANY_ID ,
                        PARENT_ID  ,
                        DESCRIPTION,
                        NAME       ,
                        POSITION   ,
                        STATUS     ,
                        DEFAULT_IMAGE,
                )
                VALUES
              
                 (
                        3          ,
                        1          ,
                        NULL          ,
                        NULL       ,
                        'Beverages',
                        NULL       ,
                        1          ,
                        'images/brand_f.jpg'
                )
                ,
                (
                        4              ,
                        1              ,
                        2              ,
                        NULL           ,
                        'Brannded Food',
                        3              ,
 
                        1              ,
                        'images/eggs.jpg'
                )
                ,
                (
                        5                        ,
                        1                        ,
                        1                        ,
                        NULL                     ,
                        'Beauty & Personal Care	',
                        3                        ,
                        1                        ,
                        'images/frozen.jpg'
                )
                ,
                (
                        6                    ,
                        1                    ,
                        1 ,
                        'Home Care & Fashion',
                        3                    ,
                        1                    ,
                        'images/home.jpg'
                )
                .[*]
                (
                        7        ,
                        1        ,
                        4        ,
                        NULL     ,
                        'Non Veg',
                        3        ,
                        1        ,
                        'images/nonveg.jpg'
                )
                ,
                (
                        8                     ,
                        1                     ,
                        3                     ,
                        NULL                  ,
                        'Dairy, Bakery & Eggs',
                        3                     ,
                        1                     ,
                        'images/veg.jpg'
                ) "; SQL statement:
INSERT INTO
                ALADIN.CATEGORIES
                (
                        id         ,
                        company_id ,
                        parent_id  ,
                        description,
                        name       ,
                        position   ,
                        status     ,
                        default_image,
                )
                VALUES
              
                 (
                        3          ,
                        1          ,
                        NULL          ,
                        NULL       ,
                        'Beverages',
                        NULL       ,
                        1          ,
                        'images/brand_f.jpg'
                )
                ,
                (
                        4              ,
                        1              ,
                        2              ,
                        NULL           ,
                        'Brannded Food',
                        3              ,
 
                        1              ,
                        'images/eggs.jpg'
                )
                ,
                (
                        5                        ,
                        1                        ,
                        1                        ,
                        NULL                     ,
                        'Beauty & Personal Care	',
                        3                        ,
                        1                        ,
                        'images/frozen.jpg'
                )
                ,
                (
                        6                    ,
                        1                    ,
                        1 ,
                        'Home Care & Fashion',
                        3                    ,
                        1                    ,
                        'images/home.jpg'
                )
                .
                (
                        7        ,
                        1        ,
                        4        ,
                        NULL     ,
                        'Non Veg',
                        3        ,
                        1        ,
                        'images/nonveg.jpg'
                )
                ,
                (
                        8                     ,
                        1                     ,
                        3                     ,
                        NULL                  ,
                        'Dairy, Bakery & Eggs',
                        3                     ,
                        1                     ,
                        'images/veg.jpg'
                ) [42000-199]
2020-04-23 16:44:51 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "INSERT INTO
                ALADIN.CATEGORIES
                (
                        ID         ,
                        COMPANY_ID ,
                        PARENT_ID  ,
                        DESCRIPTION,
                        NAME       ,
                        POSITION   ,
                        STATUS     ,
                        DEFAULT_IMAGE,
                )
                VALUES
              
                               ,[*]
                (
                        5                        ,
                        1                        ,
                        1                        ,
                        NULL                     ,
                        'Beauty & Personal Care	',
                        3                        ,
                        1                        ,
                        'images/frozen.jpg'
                )
                ,
                (
                        6                    ,
                        1                    ,
                        1 ,
                        'Home Care & Fashion',
                        3                    ,
                        1                    ,
                        'images/home.jpg'
                ) "; expected "ROW, (, DEFAULT, NOT, EXISTS, INTERSECTS"; SQL statement:
INSERT INTO
                ALADIN.CATEGORIES
                (
                        id         ,
                        company_id ,
                        parent_id  ,
                        description,
                        name       ,
                        position   ,
                        status     ,
                        default_image,
                )
                VALUES
              
                               ,
                (
                        5                        ,
                        1                        ,
                        1                        ,
                        NULL                     ,
                        'Beauty & Personal Care	',
                        3                        ,
                        1                        ,
                        'images/frozen.jpg'
                )
                ,
                (
                        6                    ,
                        1                    ,
                        1 ,
                        'Home Care & Fashion',
                        3                    ,
                        1                    ,
                        'images/home.jpg'
                ) [42001-199]
2020-04-23 16:45:06 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "INSERT INTO
                ALADIN.CATEGORIES
                (
                        ID         ,
                        COMPANY_ID ,
                        PARENT_ID  ,
                        DESCRIPTION,
                        NAME       ,
                        POSITION   ,
                        STATUS     ,
                        DEFAULT_IMAGE,
                )
                VALUES
              
                               ,[*]
                (
                        5                        ,
                        1                        ,
                        1                        ,
                        NULL                     ,
                        'Beauty & Personal Care	',
                        3                        ,
                        1                        ,
                        'images/frozen.jpg'
                )
                ,
                (
                        6                    ,
                        1                    ,
                        1 ,
                        'Home Care & Fashion',
                        3                    ,
                        1                    ,
                        'images/home.jpg'
                ),
                
                (
                        7        ,
                        1        ,
                        4        ,
                        NULL     ,
                        'Non Veg',
                        3        ,
                        1        ,
                        'images/nonveg.jpg'
                )
                ,
                (
                        8                     ,
                        1                     ,
                        3                     ,
                        NULL                  ,
                        'Dairy, Bakery & Eggs',
                        3                     ,
                        1                     ,
                        'images/veg.jpg'
                ) "; expected "ROW, (, DEFAULT, NOT, EXISTS, INTERSECTS"; SQL statement:
INSERT INTO
                ALADIN.CATEGORIES
                (
                        id         ,
                        company_id ,
                        parent_id  ,
                        description,
                        name       ,
                        position   ,
                        status     ,
                        default_image,
                )
                VALUES
              
                               ,
                (
                        5                        ,
                        1                        ,
                        1                        ,
                        NULL                     ,
                        'Beauty & Personal Care	',
                        3                        ,
                        1                        ,
                        'images/frozen.jpg'
                )
                ,
                (
                        6                    ,
                        1                    ,
                        1 ,
                        'Home Care & Fashion',
                        3                    ,
                        1                    ,
                        'images/home.jpg'
                ),
                
                (
                        7        ,
                        1        ,
                        4        ,
                        NULL     ,
                        'Non Veg',
                        3        ,
                        1        ,
                        'images/nonveg.jpg'
                )
                ,
                (
                        8                     ,
                        1                     ,
                        3                     ,
                        NULL                  ,
                        'Dairy, Bakery & Eggs',
                        3                     ,
                        1                     ,
                        'images/veg.jpg'
                ) [42001-199]
2020-04-23 16:45:15 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "INSERT INTO
                ALADIN.CATEGORIES
                (
                        ID         ,
                        COMPANY_ID ,
                        PARENT_ID  ,
                        DESCRIPTION,
                        NAME       ,
                        POSITION   ,
                        STATUS     ,
                        DEFAULT_IMAGE,
                )
                VALUES
              
                               ,[*]
                (
                        5                        ,
                        1                        ,
                        1                        ,
                        NULL                     ,
                        'Beauty & Personal Care	',
                        3                        ,
                        1                        ,
                        'images/frozen.jpg'
                )
                ,
                (
                        6                    ,
                        1                    ,
                        1 ,
                        'Home Care & Fashion',
                        3                    ,
                        1                    ,
                        'images/home.jpg'
                ), "; expected "ROW, (, DEFAULT, NOT, EXISTS, INTERSECTS"; SQL statement:
INSERT INTO
                ALADIN.CATEGORIES
                (
                        id         ,
                        company_id ,
                        parent_id  ,
                        description,
                        name       ,
                        position   ,
                        status     ,
                        default_image,
                )
                VALUES
              
                               ,
                (
                        5                        ,
                        1                        ,
                        1                        ,
                        NULL                     ,
                        'Beauty & Personal Care	',
                        3                        ,
                        1                        ,
                        'images/frozen.jpg'
                )
                ,
                (
                        6                    ,
                        1                    ,
                        1 ,
                        'Home Care & Fashion',
                        3                    ,
                        1                    ,
                        'images/home.jpg'
                ), [42001-199]
2020-04-23 16:45:24 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "INSERT INTO
                ALADIN.CATEGORIES
                (
                        ID         ,
                        COMPANY_ID ,
                        PARENT_ID  ,
                        DESCRIPTION,
                        NAME       ,
                        POSITION   ,
                        STATUS     ,
                        DEFAULT_IMAGE,
                )
                VALUES
              
                               ,[*]
                (
                        5                        ,
                        1                        ,
                        1                        ,
                        NULL                     ,
                        'Beauty & Personal Care	',
                        3                        ,
                        1                        ,
                        'images/frozen.jpg'
                ) "; expected "ROW, (, DEFAULT, NOT, EXISTS, INTERSECTS"; SQL statement:
INSERT INTO
                ALADIN.CATEGORIES
                (
                        id         ,
                        company_id ,
                        parent_id  ,
                        description,
                        name       ,
                        position   ,
                        status     ,
                        default_image,
                )
                VALUES
              
                               ,
                (
                        5                        ,
                        1                        ,
                        1                        ,
                        NULL                     ,
                        'Beauty & Personal Care	',
                        3                        ,
                        1                        ,
                        'images/frozen.jpg'
                ) [42001-199]
2020-04-23 16:45:36 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "INSERT INTO
                ALADIN.CATEGORIES
                (
                        ID         ,
                        COMPANY_ID ,
                        PARENT_ID  ,
                        DESCRIPTION,
                        NAME       ,
                        POSITION   ,
                        STATUS     ,
                        DEFAULT_IMAGE,
                )
                VALUES
              
                               ,[*]
                (
                        5                        ,
                        1                        ,
                        1                        ,
                        NULL                     ,
                        'Beauty & Personal Care	',
                        3                        ,
                        1                        ,
                        'images/frozen.jpg'
                ) "; expected "ROW, (, DEFAULT, NOT, EXISTS, INTERSECTS"; SQL statement:
INSERT INTO
                ALADIN.CATEGORIES
                (
                        id         ,
                        company_id ,
                        parent_id  ,
                        description,
                        name       ,
                        position   ,
                        status     ,
                        default_image,
                )
                VALUES
              
                               ,
                (
                        5                        ,
                        1                        ,
                        1                        ,
                        NULL                     ,
                        'Beauty & Personal Care	',
                        3                        ,
                        1                        ,
                        'images/frozen.jpg'
                ) [42001-199]
2020-04-23 16:46:10 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Column count does not match; SQL statement:
INSERT INTO
                ALADIN.CATEGORIES
                (
                        id         ,
                        company_id ,
                        parent_id  ,
                        description,
                        name       ,
                        position   ,
                        status     ,
                        default_image,
                )
                VALUES
                (
                        6                    ,
                        1                    ,
                        1 ,
                        'Home Care & Fashion',
                        3                    ,
                        1                    ,
                        'images/home.jpg'
                ),
                
                (
                        7        ,
                        1        ,
                        4        ,
                        NULL     ,
                        'Non Veg',
                        3        ,
                        1        ,
                        'images/nonveg.jpg'
                )
                ,
                (
                        8                     ,
                        1                     ,
                        3                     ,
                        NULL                  ,
                        'Dairy, Bakery & Eggs',
                        3                     ,
                        1                     ,
                        'images/veg.jpg'
                ) [21002-199]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:451)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:427)
	at org.h2.message.DbException.get(DbException.java:205)
	at org.h2.message.DbException.get(DbException.java:181)
	at org.h2.message.DbException.get(DbException.java:170)
	at org.h2.command.dml.Insert.prepare(Insert.java:314)
	at org.h2.command.Parser.prepareCommand(Parser.java:689)
	at org.h2.engine.Session.prepareLocal(Session.java:627)
	at org.h2.engine.Session.prepareCommand(Session.java:565)
	at org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1292)
	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:217)
	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:1113)
	at org.h2.server.web.WebApp.getResult(WebApp.java:1436)
	at org.h2.server.web.WebApp.query(WebApp.java:1111)
	at org.h2.server.web.WebApp$1.next(WebApp.java:1073)
	at org.h2.server.web.WebApp$1.next(WebApp.java:1060)
	at org.h2.server.web.WebThread.process(WebThread.java:173)
	at org.h2.server.web.WebThread.run(WebThread.java:93)
	at java.lang.Thread.run(Unknown Source)
2020-04-23 17:16:20 jdbc[3]: exception
org.h2.jdbc.JdbcSQLDataException: Cannot parse "TIMESTAMP" constant ; SQL statement:
INSERT INTO "ALADIN"."USERS"("ID","PASSWORD_HASH","FIRST_NAME","LAST_NAME","MIDDLE_NAME","GENDER","EMAIL","PHONE","AVATAR","SECRET_QUESTION","SECRET_ANSWER","STATUS","CREATE_DATE")VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?) -- (?1, ?2, ?3, ?4, ?5, ?6, ?7, ?8, ?9, ?10, ?11, ?12, ?13) [22007-199]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:455)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:427)
	at org.h2.message.DbException.get(DbException.java:194)
	at org.h2.value.ValueTimestamp.parse(ValueTimestamp.java:140)
	at org.h2.value.Value.convertToTimestamp(Value.java:1099)
	at org.h2.value.Value.convertTo(Value.java:778)
	at org.h2.value.Value.convertTo(Value.java:735)
	at org.h2.table.Column.convert(Column.java:199)
	at org.h2.command.dml.Insert.insertRows(Insert.java:164)
	at org.h2.command.dml.Insert.update(Insert.java:132)
	at org.h2.command.CommandContainer.update(CommandContainer.java:133)
	at org.h2.command.Command.executeUpdate(Command.java:267)
	at org.h2.jdbc.JdbcPreparedStatement.executeUpdateInternal(JdbcPreparedStatement.java:200)
	at org.h2.jdbc.JdbcPreparedStatement.executeUpdate(JdbcPreparedStatement.java:154)
	at org.h2.result.UpdatableRow.insertRow(UpdatableRow.java:324)
	at org.h2.jdbc.JdbcResultSet.insertRow(JdbcResultSet.java:3034)
	at org.h2.server.web.WebApp.editResult(WebApp.java:1133)
	at org.h2.server.web.WebApp.process(WebApp.java:243)
	at org.h2.server.web.WebApp.processRequest(WebApp.java:169)
	at org.h2.server.web.WebThread.process(WebThread.java:139)
	at org.h2.server.web.WebThread.run(WebThread.java:93)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.StringIndexOutOfBoundsException: String index out of range: 0
	at java.lang.String.charAt(Unknown Source)
	at org.h2.util.DateTimeUtils.parseDateValue(DateTimeUtils.java:345)
	at org.h2.util.DateTimeUtils.parseTimestamp(DateTimeUtils.java:528)
	at org.h2.value.ValueTimestamp.parse(ValueTimestamp.java:138)
	... 18 more
2020-04-23 17:16:20 jdbc[3]: exception
org.h2.jdbc.JdbcSQLDataException: Cannot parse "TIMESTAMP" constant ; SQL statement:
INSERT INTO "ALADIN"."USERS"("ID","PASSWORD_HASH","FIRST_NAME","LAST_NAME","MIDDLE_NAME","GENDER","EMAIL","PHONE","AVATAR","SECRET_QUESTION","SECRET_ANSWER","STATUS","CREATE_DATE")VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?) -- (?1, ?2, ?3, ?4, ?5, ?6, ?7, ?8, ?9, ?10, ?11, ?12, ?13) [22007-199]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:455)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:427)
	at org.h2.message.DbException.get(DbException.java:194)
	at org.h2.value.ValueTimestamp.parse(ValueTimestamp.java:140)
	at org.h2.value.Value.convertToTimestamp(Value.java:1099)
	at org.h2.value.Value.convertTo(Value.java:778)
	at org.h2.value.Value.convertTo(Value.java:735)
	at org.h2.table.Column.convert(Column.java:199)
	at org.h2.command.dml.Insert.insertRows(Insert.java:164)
	at org.h2.command.dml.Insert.update(Insert.java:132)
	at org.h2.command.CommandContainer.update(CommandContainer.java:133)
	at org.h2.command.Command.executeUpdate(Command.java:267)
	at org.h2.jdbc.JdbcPreparedStatement.executeUpdateInternal(JdbcPreparedStatement.java:200)
	at org.h2.jdbc.JdbcPreparedStatement.executeUpdate(JdbcPreparedStatement.java:154)
	at org.h2.result.UpdatableRow.insertRow(UpdatableRow.java:324)
	at org.h2.jdbc.JdbcResultSet.insertRow(JdbcResultSet.java:3034)
	at org.h2.server.web.WebApp.editResult(WebApp.java:1133)
	at org.h2.server.web.WebApp.process(WebApp.java:243)
	at org.h2.server.web.WebApp.processRequest(WebApp.java:169)
	at org.h2.server.web.WebThread.process(WebThread.java:139)
	at org.h2.server.web.WebThread.run(WebThread.java:93)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.StringIndexOutOfBoundsException: String index out of range: 0
	at java.lang.String.charAt(Unknown Source)
	at org.h2.util.DateTimeUtils.parseDateValue(DateTimeUtils.java:345)
	at org.h2.util.DateTimeUtils.parseTimestamp(DateTimeUtils.java:528)
	at org.h2.value.ValueTimestamp.parse(ValueTimestamp.java:138)
	... 18 more
2020-04-23 17:22:47 jdbc[3]: exception
org.h2.jdbc.JdbcSQLDataException: Data conversion error converting "'' (ORDER_ADDRESSES: ""REGION_ID"" INT)"; SQL statement:
INSERT INTO "ALADIN"."ORDER_ADDRESSES"("ID","ORDER_ID","CREATED_AT","POSTCODE","REGION_ID","UPDATED_AT")VALUES(?,?,?,?,?,?) -- (?1, ?2, ?3, ?4, ?5, ?6) [22018-199]
2020-04-23 17:22:47 jdbc[3]: exception
org.h2.jdbc.JdbcSQLDataException: Data conversion error converting "'' (ORDER_ADDRESSES: ""REGION_ID"" INT)"; SQL statement:
INSERT INTO "ALADIN"."ORDER_ADDRESSES"("ID","ORDER_ID","CREATED_AT","POSTCODE","REGION_ID","UPDATED_AT")VALUES(?,?,?,?,?,?) -- (?1, ?2, ?3, ?4, ?5, ?6) [22018-199]
2020-04-23 17:26:57 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Column "ADDRESS_ID" not found; SQL statement:
ALTER TABLE
                ALADIN.CATEGORIES ADD CONSTRAINT fk_address__orders FOREIGN KEY (address_id) REFERENCES ALADIN.ADDRESSES  (id) [42122-199]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:451)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:427)
	at org.h2.message.DbException.get(DbException.java:205)
	at org.h2.message.DbException.get(DbException.java:181)
	at org.h2.table.Table.getColumn(Table.java:708)
	at org.h2.table.IndexColumn.mapColumns(IndexColumn.java:115)
	at org.h2.command.ddl.AlterTableAddConstraint.tryUpdate(AlterTableAddConstraint.java:216)
	at org.h2.command.ddl.AlterTableAddConstraint.update(AlterTableAddConstraint.java:78)
	at org.h2.command.CommandContainer.update(CommandContainer.java:133)
	at org.h2.command.Command.executeUpdate(Command.java:267)
	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:233)
	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:1113)
	at org.h2.server.web.WebApp.getResult(WebApp.java:1436)
	at org.h2.server.web.WebApp.query(WebApp.java:1111)
	at org.h2.server.web.WebApp$1.next(WebApp.java:1073)
	at org.h2.server.web.WebApp$1.next(WebApp.java:1060)
	at org.h2.server.web.WebThread.process(WebThread.java:173)
	at org.h2.server.web.WebThread.run(WebThread.java:93)
	at java.lang.Thread.run(Unknown Source)
2020-04-23 17:27:35 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Constraint "FK_ORDERS__ADDRESS" already exists; SQL statement:
ALTER TABLE
                ALADIN.ORDER_ADDRESSES  ADD CONSTRAINT fk_orders__address FOREIGN KEY (order_id) REFERENCES ALADIN.ORDERS  (id) [90045-199]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:573)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:427)
	at org.h2.message.DbException.get(DbException.java:205)
	at org.h2.message.DbException.get(DbException.java:181)
	at org.h2.command.ddl.AlterTableAddConstraint.tryUpdate(AlterTableAddConstraint.java:114)
	at org.h2.command.ddl.AlterTableAddConstraint.update(AlterTableAddConstraint.java:78)
	at org.h2.command.CommandContainer.update(CommandContainer.java:133)
	at org.h2.command.Command.executeUpdate(Command.java:267)
	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:233)
	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:1113)
	at org.h2.server.web.WebApp.getResult(WebApp.java:1436)
	at org.h2.server.web.WebApp.query(WebApp.java:1111)
	at org.h2.server.web.WebApp$1.next(WebApp.java:1073)
	at org.h2.server.web.WebApp$1.next(WebApp.java:1060)
	at org.h2.server.web.WebThread.process(WebThread.java:173)
	at org.h2.server.web.WebThread.run(WebThread.java:93)
	at java.lang.Thread.run(Unknown Source)
2020-04-23 17:27:57 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "ALADIN[*].ORDER_ADDRESSES"; expected "ALTER, ANALYZE"; SQL statement:
ALADIN.ORDER_ADDRESSES [42001-199]
2020-04-23 17:35:42 jdbc[3]: exception
org.h2.jdbc.JdbcSQLDataException: Cannot parse "TIMESTAMP" constant "Null"; SQL statement:
INSERT INTO "ALADIN"."ORDERS"("ID","CUSTOMER_ID","SUPPLIER_ID","ORDER_DATE","SHIPPED_DATE","DELIVERY_FEE","PAID_DATE","PAYMENT_TYPE","IS_VIRTUAL","IS_CHANGED","IS_MULTI_SHIPPING","ITEMS_COUNT","ITEMS_QUANTITY","REMOTE_IP","ORDER_STATUS","BASE_GRAND_TOTAL","BASE_SUBTOTAL","CHECKOUT_COMMENT","SUBTOTAL","UPDATED_AT")VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?) -- (?1, ?2, ?3, ?4, ?5, ?6, ?7, ?8, ?9, ?10, ?11, ?12, ?13, ?14, ?15, ?16, ?17, ?18, ?19, ?20) [22007-199]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:455)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:427)
	at org.h2.message.DbException.get(DbException.java:194)
	at org.h2.value.ValueTimestamp.parse(ValueTimestamp.java:140)
	at org.h2.value.Value.convertToTimestamp(Value.java:1099)
	at org.h2.value.Value.convertTo(Value.java:778)
	at org.h2.value.Value.convertTo(Value.java:735)
	at org.h2.table.Column.convert(Column.java:199)
	at org.h2.command.dml.Insert.insertRows(Insert.java:164)
	at org.h2.command.dml.Insert.update(Insert.java:132)
	at org.h2.command.CommandContainer.update(CommandContainer.java:133)
	at org.h2.command.Command.executeUpdate(Command.java:267)
	at org.h2.jdbc.JdbcPreparedStatement.executeUpdateInternal(JdbcPreparedStatement.java:200)
	at org.h2.jdbc.JdbcPreparedStatement.executeUpdate(JdbcPreparedStatement.java:154)
	at org.h2.result.UpdatableRow.insertRow(UpdatableRow.java:324)
	at org.h2.jdbc.JdbcResultSet.insertRow(JdbcResultSet.java:3034)
	at org.h2.server.web.WebApp.editResult(WebApp.java:1133)
	at org.h2.server.web.WebApp.process(WebApp.java:243)
	at org.h2.server.web.WebApp.processRequest(WebApp.java:169)
	at org.h2.server.web.WebThread.process(WebThread.java:139)
	at org.h2.server.web.WebThread.run(WebThread.java:93)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.IllegalArgumentException: Null
	at org.h2.util.DateTimeUtils.parseDateValue(DateTimeUtils.java:366)
	at org.h2.util.DateTimeUtils.parseTimestamp(DateTimeUtils.java:528)
	at org.h2.value.ValueTimestamp.parse(ValueTimestamp.java:138)
	... 18 more
2020-04-23 17:35:42 jdbc[3]: exception
org.h2.jdbc.JdbcSQLDataException: Cannot parse "TIMESTAMP" constant "Null"; SQL statement:
INSERT INTO "ALADIN"."ORDERS"("ID","CUSTOMER_ID","SUPPLIER_ID","ORDER_DATE","SHIPPED_DATE","DELIVERY_FEE","PAID_DATE","PAYMENT_TYPE","IS_VIRTUAL","IS_CHANGED","IS_MULTI_SHIPPING","ITEMS_COUNT","ITEMS_QUANTITY","REMOTE_IP","ORDER_STATUS","BASE_GRAND_TOTAL","BASE_SUBTOTAL","CHECKOUT_COMMENT","SUBTOTAL","UPDATED_AT")VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?) -- (?1, ?2, ?3, ?4, ?5, ?6, ?7, ?8, ?9, ?10, ?11, ?12, ?13, ?14, ?15, ?16, ?17, ?18, ?19, ?20) [22007-199]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:455)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:427)
	at org.h2.message.DbException.get(DbException.java:194)
	at org.h2.value.ValueTimestamp.parse(ValueTimestamp.java:140)
	at org.h2.value.Value.convertToTimestamp(Value.java:1099)
	at org.h2.value.Value.convertTo(Value.java:778)
	at org.h2.value.Value.convertTo(Value.java:735)
	at org.h2.table.Column.convert(Column.java:199)
	at org.h2.command.dml.Insert.insertRows(Insert.java:164)
	at org.h2.command.dml.Insert.update(Insert.java:132)
	at org.h2.command.CommandContainer.update(CommandContainer.java:133)
	at org.h2.command.Command.executeUpdate(Command.java:267)
	at org.h2.jdbc.JdbcPreparedStatement.executeUpdateInternal(JdbcPreparedStatement.java:200)
	at org.h2.jdbc.JdbcPreparedStatement.executeUpdate(JdbcPreparedStatement.java:154)
	at org.h2.result.UpdatableRow.insertRow(UpdatableRow.java:324)
	at org.h2.jdbc.JdbcResultSet.insertRow(JdbcResultSet.java:3034)
	at org.h2.server.web.WebApp.editResult(WebApp.java:1133)
	at org.h2.server.web.WebApp.process(WebApp.java:243)
	at org.h2.server.web.WebApp.processRequest(WebApp.java:169)
	at org.h2.server.web.WebThread.process(WebThread.java:139)
	at org.h2.server.web.WebThread.run(WebThread.java:93)
	at java.lang.Thread.run(Unknown Source)
Caused by: java.lang.IllegalArgumentException: Null
	at org.h2.util.DateTimeUtils.parseDateValue(DateTimeUtils.java:366)
	at org.h2.util.DateTimeUtils.parseTimestamp(DateTimeUtils.java:528)
	at org.h2.value.ValueTimestamp.parse(ValueTimestamp.java:138)
	... 18 more
2020-04-23 17:39:17 jdbc[3]: exception
org.h2.jdbc.JdbcSQLDataException: Data conversion error converting "'' (ORDER_DETAILS: ""PRICE"" DECIMAL(19, 2) DEFAULT '0.0000')"; SQL statement:
INSERT INTO "ALADIN"."ORDER_DETAILS"("ID","ORDER_ID","PRODUCT_ID","BASE_PRICE","BASE_ROW_TOTAL","CREATED_AT","DESCRIPTION","FREE_SHIPPING","NAME","PRICE","PRODUCT_TYPE","QUANTITY","ROW_TOTAL","ROW_WEIGHT","UPDATED_AT","WEIGHT")VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?) -- (?1, ?2, ?3, ?4, ?5, ?6, ?7, ?8, ?9, ?10, ?11, ?12, ?13, ?14, ?15, ?16) [22018-199]
2020-04-23 17:39:17 jdbc[3]: exception
org.h2.jdbc.JdbcSQLDataException: Data conversion error converting "'' (ORDER_DETAILS: ""PRICE"" DECIMAL(19, 2) DEFAULT '0.0000')"; SQL statement:
INSERT INTO "ALADIN"."ORDER_DETAILS"("ID","ORDER_ID","PRODUCT_ID","BASE_PRICE","BASE_ROW_TOTAL","CREATED_AT","DESCRIPTION","FREE_SHIPPING","NAME","PRICE","PRODUCT_TYPE","QUANTITY","ROW_TOTAL","ROW_WEIGHT","UPDATED_AT","WEIGHT")VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?) -- (?1, ?2, ?3, ?4, ?5, ?6, ?7, ?8, ?9, ?10, ?11, ?12, ?13, ?14, ?15, ?16) [22018-199]
2020-04-23 17:51:07 jdbc[3]: exception
org.h2.jdbc.JdbcSQLDataException: Data conversion error converting "'' (PRODUCT_CATEGORIES: ""PRODUCT_ID"" BIGINT NOT NULL)"; SQL statement:
INSERT INTO "ALADIN"."PRODUCT_CATEGORIES"("PRODUCT_ID","CATEGORY_ID")VALUES(?,?) -- (?1, ?2) [22018-199]
2020-04-23 17:51:07 jdbc[3]: exception
org.h2.jdbc.JdbcSQLDataException: Data conversion error converting "'' (PRODUCT_CATEGORIES: ""PRODUCT_ID"" BIGINT NOT NULL)"; SQL statement:
INSERT INTO "ALADIN"."PRODUCT_CATEGORIES"("PRODUCT_ID","CATEGORY_ID")VALUES(?,?) -- (?1, ?2) [22018-199]
2020-04-23 17:54:12 jdbc[3]: exception
org.h2.jdbc.JdbcSQLDataException: Data conversion error converting "'' (ORDER_DETAILS: ""ROW_WEIGHT"" DECIMAL(19, 2) DEFAULT '0.0000')"; SQL statement:
INSERT INTO "ALADIN"."ORDER_DETAILS"("ID","ORDER_ID","PRODUCT_ID","BASE_PRICE","BASE_ROW_TOTAL","CREATED_AT","DESCRIPTION","FREE_SHIPPING","NAME","PRICE","PRODUCT_TYPE","QUANTITY","ROW_TOTAL","ROW_WEIGHT","UPDATED_AT","WEIGHT")VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?) -- (?1, ?2, ?3, ?4, ?5, ?6, ?7, ?8, ?9, ?10, ?11, ?12, ?13, ?14, ?15, ?16) [22018-199]
2020-04-23 17:54:12 jdbc[3]: exception
org.h2.jdbc.JdbcSQLDataException: Data conversion error converting "'' (ORDER_DETAILS: ""ROW_WEIGHT"" DECIMAL(19, 2) DEFAULT '0.0000')"; SQL statement:
INSERT INTO "ALADIN"."ORDER_DETAILS"("ID","ORDER_ID","PRODUCT_ID","BASE_PRICE","BASE_ROW_TOTAL","CREATED_AT","DESCRIPTION","FREE_SHIPPING","NAME","PRICE","PRODUCT_TYPE","QUANTITY","ROW_TOTAL","ROW_WEIGHT","UPDATED_AT","WEIGHT")VALUES(?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?) -- (?1, ?2, ?3, ?4, ?5, ?6, ?7, ?8, ?9, ?10, ?11, ?12, ?13, ?14, ?15, ?16) [22018-199]
2020-04-23 18:04:16 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Column "CULOMN" not found; SQL statement:
alter table  ALADIN.ADDRESSES drop culomn user_id [42122-199]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:451)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:427)
	at org.h2.message.DbException.get(DbException.java:205)
	at org.h2.message.DbException.get(DbException.java:181)
	at org.h2.table.Table.getColumn(Table.java:708)
	at org.h2.command.Parser.parseAlterTable(Parser.java:7314)
	at org.h2.command.Parser.parseAlter(Parser.java:6546)
	at org.h2.command.Parser.parsePrepared(Parser.java:828)
	at org.h2.command.Parser.parse(Parser.java:788)
	at org.h2.command.Parser.parse(Parser.java:760)
	at org.h2.command.Parser.prepareCommand(Parser.java:683)
	at org.h2.engine.Session.prepareLocal(Session.java:627)
	at org.h2.engine.Session.prepareCommand(Session.java:565)
	at org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1292)
	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:217)
	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:1113)
	at org.h2.server.web.WebApp.getResult(WebApp.java:1436)
	at org.h2.server.web.WebApp.query(WebApp.java:1111)
	at org.h2.server.web.WebApp$1.next(WebApp.java:1073)
	at org.h2.server.web.WebApp$1.next(WebApp.java:1060)
	at org.h2.server.web.WebThread.process(WebThread.java:173)
	at org.h2.server.web.WebThread.run(WebThread.java:93)
	at java.lang.Thread.run(Unknown Source)
2020-04-23 18:06:56 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "ALTER ALADIN[*].ORDER_ADDRESSES ADD COLUMN  INSTRUCTIONS        VARCHAR(255) "; expected "TABLE, USER, INDEX, SCHEMA, SEQUENCE, VIEW"; SQL statement:
alter ALADIN.ORDER_ADDRESSES add column  instructions        VARCHAR(255) [42001-199]
2020-04-23 18:28:23 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "ALTER TABLE
                ALADIN.ROLES_PERMISSIONS  ADD CONSTRAINT FK_ROLES__PERMISSIONS FOREIGN KEY (ROLE_ID) REFERENCESALADIN[*].ROLES   (ID) "; expected "INDEX, REFERENCES"; SQL statement:
ALTER TABLE
                ALADIN.ROLES_PERMISSIONS  ADD CONSTRAINT fk_roles__permissions FOREIGN KEY (role_id) REFERENCESALADIN.ROLES   (id) [42001-199]
2020-04-23 18:28:23 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Column "PERMISSON_ID" not found; SQL statement:
ALTER TABLE
                ALADIN.ROLES_PERMISSIONS  ADD CONSTRAINT fk_permissions__roles FOREIGN KEY (permisson_id) REFERENCES ALADIN.PERMISSIONS  (id) [42122-199]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:451)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:427)
	at org.h2.message.DbException.get(DbException.java:205)
	at org.h2.message.DbException.get(DbException.java:181)
	at org.h2.table.Table.getColumn(Table.java:708)
	at org.h2.table.IndexColumn.mapColumns(IndexColumn.java:115)
	at org.h2.command.ddl.AlterTableAddConstraint.tryUpdate(AlterTableAddConstraint.java:216)
	at org.h2.command.ddl.AlterTableAddConstraint.update(AlterTableAddConstraint.java:78)
	at org.h2.command.CommandContainer.update(CommandContainer.java:133)
	at org.h2.command.Command.executeUpdate(Command.java:267)
	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:233)
	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:1113)
	at org.h2.server.web.WebApp.getResult(WebApp.java:1436)
	at org.h2.server.web.WebApp.query(WebApp.java:1111)
	at org.h2.server.web.WebApp$1.next(WebApp.java:1073)
	at org.h2.server.web.WebApp$1.next(WebApp.java:1060)
	at org.h2.server.web.WebThread.process(WebThread.java:173)
	at org.h2.server.web.WebThread.run(WebThread.java:93)
	at java.lang.Thread.run(Unknown Source)
2020-04-23 18:28:33 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Column "PERMISSON_ID" not found; SQL statement:
ALTER TABLE
                ALADIN.ROLES_PERMISSIONS  ADD CONSTRAINT fk_permissions__roles FOREIGN KEY (permisson_id) REFERENCES ALADIN.PERMISSIONS  (id) [42122-199]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:451)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:427)
	at org.h2.message.DbException.get(DbException.java:205)
	at org.h2.message.DbException.get(DbException.java:181)
	at org.h2.table.Table.getColumn(Table.java:708)
	at org.h2.table.IndexColumn.mapColumns(IndexColumn.java:115)
	at org.h2.command.ddl.AlterTableAddConstraint.tryUpdate(AlterTableAddConstraint.java:216)
	at org.h2.command.ddl.AlterTableAddConstraint.update(AlterTableAddConstraint.java:78)
	at org.h2.command.CommandContainer.update(CommandContainer.java:133)
	at org.h2.command.Command.executeUpdate(Command.java:267)
	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:233)
	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:1113)
	at org.h2.server.web.WebApp.getResult(WebApp.java:1436)
	at org.h2.server.web.WebApp.query(WebApp.java:1111)
	at org.h2.server.web.WebApp$1.next(WebApp.java:1073)
	at org.h2.server.web.WebApp$1.next(WebApp.java:1060)
	at org.h2.server.web.WebThread.process(WebThread.java:173)
	at org.h2.server.web.WebThread.run(WebThread.java:93)
	at java.lang.Thread.run(Unknown Source)
2020-04-23 18:29:04 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Constraint "FK_ROLES__PERMISSIONS" already exists; SQL statement:
ALTER TABLE
                ALADIN.ROLES_PERMISSIONS  ADD CONSTRAINT fk_roles__permissions FOREIGN KEY (role_id) REFERENCES ALADIN.ROLES   (id) [90045-199]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:573)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:427)
	at org.h2.message.DbException.get(DbException.java:205)
	at org.h2.message.DbException.get(DbException.java:181)
	at org.h2.command.ddl.AlterTableAddConstraint.tryUpdate(AlterTableAddConstraint.java:114)
	at org.h2.command.ddl.AlterTableAddConstraint.update(AlterTableAddConstraint.java:78)
	at org.h2.command.CommandContainer.update(CommandContainer.java:133)
	at org.h2.command.Command.executeUpdate(Command.java:267)
	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:233)
	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:1113)
	at org.h2.server.web.WebApp.getResult(WebApp.java:1436)
	at org.h2.server.web.WebApp.query(WebApp.java:1111)
	at org.h2.server.web.WebApp$1.next(WebApp.java:1073)
	at org.h2.server.web.WebApp$1.next(WebApp.java:1060)
	at org.h2.server.web.WebThread.process(WebThread.java:173)
	at org.h2.server.web.WebThread.run(WebThread.java:93)
	at java.lang.Thread.run(Unknown Source)
2020-04-23 18:42:36 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "ALTER TABLE  ALADIN.CUSTOMERS RENAME COLUMN ORDER_ADDRESSES_ID TO CREATE_DATE DATETIME[*] "; SQL statement:
alter table  ALADIN.CUSTOMERS rename column order_addresses_id to create_date DATETIME [42000-199]
2020-04-23 18:43:00 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "SELECT * FROM ALADIN.CUSTOMERS ADD COLUMN[*] CREATE_DATE DATETIME "; SQL statement:
SELECT * FROM ALADIN.CUSTOMERS add column create_date DATETIME [42000-199]
2020-04-23 18:57:55 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "ALTER TABLE ALADIN.ORDERS RENAME SHIPPED_DATE[*] TO DELIVERY_DATE "; expected "COLUMN, CONSTRAINT, TO"; SQL statement:
alter table ALADIN.ORDERS rename shipped_date to delivery_date [42001-199]
2020-04-23 19:18:46 jdbc[3]: exception
org.h2.jdbc.JdbcSQLDataException: Data conversion error converting "'New' (ORDER_PAYMENT: ""STATUS"" INT NOT NULL)"; SQL statement:
INSERT INTO "ALADIN"."ORDER_PAYMENT"("PAYMENT_ID","ORDER_ID","STATUS","TRANSACTION_ID")VALUES(?,?,?,?) -- (?1, ?2, ?3, ?4) [22018-199]
2020-04-23 19:18:46 jdbc[3]: exception
org.h2.jdbc.JdbcSQLDataException: Data conversion error converting "'New' (ORDER_PAYMENT: ""STATUS"" INT NOT NULL)"; SQL statement:
INSERT INTO "ALADIN"."ORDER_PAYMENT"("PAYMENT_ID","ORDER_ID","STATUS","TRANSACTION_ID")VALUES(?,?,?,?) -- (?1, ?2, ?3, ?4) [22018-199]
2020-04-23 19:24:28 jdbc[3]: exception
org.h2.jdbc.JdbcSQLNonTransientException: Unknown data type: ; SQL statement:
alter table ALADIN.PAYMENTS add column card_id [50004-199]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:502)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:427)
	at org.h2.message.DbException.get(DbException.java:205)
	at org.h2.message.DbException.get(DbException.java:181)
	at org.h2.command.Parser.parseColumnWithType(Parser.java:5524)
	at org.h2.command.Parser.parseColumnForTable(Parser.java:5254)
	at org.h2.command.Parser.parseTableColumnDefinition(Parser.java:7932)
	at org.h2.command.Parser.parseAlterTableAddColumn(Parser.java:7586)
	at org.h2.command.Parser.parseAlterTable(Parser.java:7209)
	at org.h2.command.Parser.parseAlter(Parser.java:6546)
	at org.h2.command.Parser.parsePrepared(Parser.java:828)
	at org.h2.command.Parser.parse(Parser.java:788)
	at org.h2.command.Parser.parse(Parser.java:760)
	at org.h2.command.Parser.prepareCommand(Parser.java:683)
	at org.h2.engine.Session.prepareLocal(Session.java:627)
	at org.h2.engine.Session.prepareCommand(Session.java:565)
	at org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1292)
	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:217)
	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:1113)
	at org.h2.server.web.WebApp.getResult(WebApp.java:1436)
	at org.h2.server.web.WebApp.query(WebApp.java:1111)
	at org.h2.server.web.WebApp$1.next(WebApp.java:1073)
	at org.h2.server.web.WebApp$1.next(WebApp.java:1060)
	at org.h2.server.web.WebThread.process(WebThread.java:173)
	at org.h2.server.web.WebThread.run(WebThread.java:93)
	at java.lang.Thread.run(Unknown Source)
2020-04-23 19:27:15 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "ALTER TABLE ALADIN.PAYMENTS RENAME COLUMN DESCRIPTION TO AMOUNT DECIMAL[*](19,2) NULL DEFAULT '0.0000' "; SQL statement:
alter table ALADIN.PAYMENTS rename column description to amount DECIMAL(19,2) NULL DEFAULT '0.0000' [42000-199]
2020-04-23 19:27:19 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "ALTER TABLE ALADIN.PAYMENTS RENAME COLUMN DESCRIPTION TO AMOUNT DECIMAL[*](19,2)  DEFAULT '0.0000' "; SQL statement:
alter table ALADIN.PAYMENTS rename column description to amount DECIMAL(19,2)  DEFAULT '0.0000' [42000-199]
2020-04-23 19:27:32 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "ALTER TABLE ALADIN.PAYMENTS RENAME COLUMN DESCRIPTION TO AMOUNT DECIMAL[*](19,2) "; SQL statement:
alter table ALADIN.PAYMENTS rename column description to amount DECIMAL(19,2) [42000-199]
2020-04-23 19:27:37 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "ALTER TABLE ALADIN.PAYMENTS RENAME COLUMN DESCRIPTION TO AMOUNT DECIMAL[*](19,2) "; SQL statement:
alter table ALADIN.PAYMENTS rename column description to amount DECIMAL(19,2) [42000-199]
2020-04-23 19:28:04 jdbc[3]: exception
org.h2.jdbc.JdbcSQLNonTransientException: Unknown data type: "TO"; SQL statement:
alter table ALADIN.PAYMENTS add column description to amount DECIMAL(19,2) NULL DEFAULT '0.0000' [50004-199]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:502)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:427)
	at org.h2.message.DbException.get(DbException.java:205)
	at org.h2.message.DbException.get(DbException.java:181)
	at org.h2.command.Parser.parseColumnWithType(Parser.java:5524)
	at org.h2.command.Parser.parseColumnForTable(Parser.java:5254)
	at org.h2.command.Parser.parseTableColumnDefinition(Parser.java:7932)
	at org.h2.command.Parser.parseAlterTableAddColumn(Parser.java:7586)
	at org.h2.command.Parser.parseAlterTable(Parser.java:7209)
	at org.h2.command.Parser.parseAlter(Parser.java:6546)
	at org.h2.command.Parser.parsePrepared(Parser.java:828)
	at org.h2.command.Parser.parse(Parser.java:788)
	at org.h2.command.Parser.parse(Parser.java:760)
	at org.h2.command.Parser.prepareCommand(Parser.java:683)
	at org.h2.engine.Session.prepareLocal(Session.java:627)
	at org.h2.engine.Session.prepareCommand(Session.java:565)
	at org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1292)
	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:217)
	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:1113)
	at org.h2.server.web.WebApp.getResult(WebApp.java:1436)
	at org.h2.server.web.WebApp.query(WebApp.java:1111)
	at org.h2.server.web.WebApp$1.next(WebApp.java:1073)
	at org.h2.server.web.WebApp$1.next(WebApp.java:1060)
	at org.h2.server.web.WebThread.process(WebThread.java:173)
	at org.h2.server.web.WebThread.run(WebThread.java:93)
	at java.lang.Thread.run(Unknown Source)
2020-04-23 19:28:09 jdbc[3]: exception
org.h2.jdbc.JdbcSQLNonTransientException: Unknown data type: "TO"; SQL statement:
alter table ALADIN.PAYMENTS add column description to amount DECIMAL(19,2)  DEFAULT '0.0000' [50004-199]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:502)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:427)
	at org.h2.message.DbException.get(DbException.java:205)
	at org.h2.message.DbException.get(DbException.java:181)
	at org.h2.command.Parser.parseColumnWithType(Parser.java:5524)
	at org.h2.command.Parser.parseColumnForTable(Parser.java:5254)
	at org.h2.command.Parser.parseTableColumnDefinition(Parser.java:7932)
	at org.h2.command.Parser.parseAlterTableAddColumn(Parser.java:7586)
	at org.h2.command.Parser.parseAlterTable(Parser.java:7209)
	at org.h2.command.Parser.parseAlter(Parser.java:6546)
	at org.h2.command.Parser.parsePrepared(Parser.java:828)
	at org.h2.command.Parser.parse(Parser.java:788)
	at org.h2.command.Parser.parse(Parser.java:760)
	at org.h2.command.Parser.prepareCommand(Parser.java:683)
	at org.h2.engine.Session.prepareLocal(Session.java:627)
	at org.h2.engine.Session.prepareCommand(Session.java:565)
	at org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1292)
	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:217)
	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:1113)
	at org.h2.server.web.WebApp.getResult(WebApp.java:1436)
	at org.h2.server.web.WebApp.query(WebApp.java:1111)
	at org.h2.server.web.WebApp$1.next(WebApp.java:1073)
	at org.h2.server.web.WebApp$1.next(WebApp.java:1060)
	at org.h2.server.web.WebThread.process(WebThread.java:173)
	at org.h2.server.web.WebThread.run(WebThread.java:93)
	at java.lang.Thread.run(Unknown Source)
2020-04-23 19:53:26 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "ALTER TABLE  ALADIN.ORDER_ITEMS RENAME TABLE[*] BASE_ROW_TOTAL TO BASE_ITEM_TOTAL "; expected "COLUMN, CONSTRAINT, TO"; SQL statement:
alter table  ALADIN.ORDER_ITEMS rename table base_row_total to base_item_total [42001-199]
2020-04-23 19:55:11 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "ALTER TABLE  ALADIN.ORDER_ITEMS RENAME COLUMN PRICETO ITEM_PRICE[*] "; expected "TO"; SQL statement:
alter table  ALADIN.ORDER_ITEMS rename column priceto item_price [42001-199]
2020-04-23 20:29:35 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "ALTER TABLE ALADIN.USERS  ADD COLUMN  PASSWORD_RESET_TOKEN NVARCHAR(250)  ,[*] "; SQL statement:
alter table ALADIN.USERS  add column  password_reset_token NVARCHAR(250)  , [42000-199]
2020-04-23 20:37:31 database: wrong user or password; user: "SA"
org.h2.message.DbException: Wrong user name or password [28000-199]
	at org.h2.message.DbException.get(DbException.java:205)
	at org.h2.message.DbException.get(DbException.java:181)
	at org.h2.message.DbException.get(DbException.java:170)
	at org.h2.engine.Engine.openSession(Engine.java:126)
	at org.h2.engine.Engine.openSession(Engine.java:201)
	at org.h2.engine.Engine.createSessionAndValidate(Engine.java:178)
	at org.h2.engine.Engine.createSession(Engine.java:161)
	at org.h2.engine.Engine.createSession(Engine.java:31)
	at org.h2.engine.SessionRemote.connectEmbeddedOrServer(SessionRemote.java:336)
	at org.h2.jdbc.JdbcConnection.<init>(JdbcConnection.java:169)
	at org.h2.jdbc.JdbcConnection.<init>(JdbcConnection.java:148)
	at org.h2.Driver.connect(Driver.java:69)
	at org.h2.util.JdbcUtils.getConnection(JdbcUtils.java:299)
	at org.h2.server.web.WebServer.getConnection(WebServer.java:782)
	at org.h2.server.web.WebApp.login(WebApp.java:1004)
	at org.h2.server.web.WebApp.process(WebApp.java:219)
	at org.h2.server.web.WebApp.processRequest(WebApp.java:169)
	at org.h2.server.web.WebThread.process(WebThread.java:139)
	at org.h2.server.web.WebThread.run(WebThread.java:93)
	at java.lang.Thread.run(Unknown Source)
Caused by: org.h2.jdbc.JdbcSQLInvalidAuthorizationSpecException: Wrong user name or password [28000-199]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:459)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:427)
	... 20 more
2020-04-23 20:53:46 database: CREATE CACHED TABLE "ALADIN"."PRODUCTS"(
    "ID" INT NOT NULL,
    "PRODUCT_CODE" VARCHAR(25),
    "NAME" VARCHAR(255),
    "OVERVIEW" VARCHAR(255),
    "BROWSING_NAME" VARCHAR(255),
    "DESCRIPTION" VARCHAR(250),
    "STANDARD_COST" DECIMAL(19, 4) DEFAULT '0.0000',
    "LIST_PRICE" DECIMAL(19, 4) DEFAULT '0.0000' NOT NULL,
    "TARGET_LEVEL" INT,
    "REORDER_LEVEL" INT,
    "MINIMUM_REORDER_QUANTITY" INT,
    "QUANTITY_PER_UNIT" VARCHAR(50),
    "DISCONTINUED" TINYINT DEFAULT '0',
    "DEFAULT_IMAGE" VARCHAR(255),
    "CREATED_ON" DATETIME,
    "RANK" INT NOT NULL,
    "SALE_PRICE" DOUBLE,
    "SKU" VARCHAR(255),
    "STATUS" INT,
    "UPDATED_ON" DATETIME
)
org.h2.jdbc.JdbcSQLNonTransientException: Unknown data type: "TINYINT"; SQL statement:
CREATE CACHED TABLE "ALADIN"."PRODUCTS"(
    "ID" INT NOT NULL,
    "PRODUCT_CODE" VARCHAR(25),
    "NAME" VARCHAR(255),
    "OVERVIEW" VARCHAR(255),
    "BROWSING_NAME" VARCHAR(255),
    "DESCRIPTION" VARCHAR(250),
    "STANDARD_COST" DECIMAL(19, 4) DEFAULT '0.0000',
    "LIST_PRICE" DECIMAL(19, 4) DEFAULT '0.0000' NOT NULL,
    "TARGET_LEVEL" INT,
    "REORDER_LEVEL" INT,
    "MINIMUM_REORDER_QUANTITY" INT,
    "QUANTITY_PER_UNIT" VARCHAR(50),
    "DISCONTINUED" TINYINT DEFAULT '0',
    "DEFAULT_IMAGE" VARCHAR(255),
    "CREATED_ON" DATETIME,
    "RANK" INT NOT NULL,
    "SALE_PRICE" DOUBLE,
    "SKU" VARCHAR(255),
    "STATUS" INT,
    "UPDATED_ON" DATETIME
) [50004-199]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:502)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:427)
	at org.h2.message.DbException.get(DbException.java:205)
	at org.h2.message.DbException.get(DbException.java:181)
	at org.h2.command.Parser.parseColumnWithType(Parser.java:5524)
	at org.h2.command.Parser.parseColumnForTable(Parser.java:5254)
	at org.h2.command.Parser.parseTableColumnDefinition(Parser.java:7932)
	at org.h2.command.Parser.parseCreateTable(Parser.java:7832)
	at org.h2.command.Parser.parseCreate(Parser.java:5818)
	at org.h2.command.Parser.parsePrepared(Parser.java:846)
	at org.h2.command.Parser.parse(Parser.java:788)
	at org.h2.command.Parser.parse(Parser.java:760)
	at org.h2.command.Parser.prepare(Parser.java:667)
	at org.h2.engine.Session.prepare(Session.java:592)
	at org.h2.engine.Session.prepare(Session.java:576)
	at org.h2.engine.MetaRecord.execute(MetaRecord.java:58)
	at org.h2.engine.Database.open(Database.java:842)
	at org.h2.engine.Database.openDatabase(Database.java:319)
	at org.h2.engine.Database.<init>(Database.java:313)
	at org.h2.engine.Engine.openSession(Engine.java:69)
	at org.h2.engine.Engine.openSession(Engine.java:201)
	at org.h2.engine.Engine.createSessionAndValidate(Engine.java:178)
	at org.h2.engine.Engine.createSession(Engine.java:161)
	at org.h2.engine.Engine.createSession(Engine.java:31)
	at org.h2.engine.SessionRemote.connectEmbeddedOrServer(SessionRemote.java:336)
	at org.h2.jdbc.JdbcConnection.<init>(JdbcConnection.java:169)
	at org.h2.jdbc.JdbcConnection.<init>(JdbcConnection.java:148)
	at org.h2.Driver.connect(Driver.java:69)
	at com.zaxxer.hikari.util.DriverDataSource.getConnection(DriverDataSource.java:136)
	at com.zaxxer.hikari.pool.PoolBase.newConnection(PoolBase.java:369)
	at com.zaxxer.hikari.pool.PoolBase.newPoolEntry(PoolBase.java:198)
	at com.zaxxer.hikari.pool.HikariPool.createPoolEntry(HikariPool.java:467)
	at com.zaxxer.hikari.pool.HikariPool.checkFailFast(HikariPool.java:541)
	at com.zaxxer.hikari.pool.HikariPool.<init>(HikariPool.java:115)
	at com.zaxxer.hikari.HikariDataSource.getConnection(HikariDataSource.java:112)
	at org.springframework.jdbc.datasource.DataSourceUtils.fetchConnection(DataSourceUtils.java:157)
	at org.springframework.jdbc.datasource.DataSourceUtils.doGetConnection(DataSourceUtils.java:115)
	at org.springframework.jdbc.datasource.DataSourceUtils.getConnection(DataSourceUtils.java:78)
	at org.springframework.jdbc.support.JdbcUtils.extractDatabaseMetaData(JdbcUtils.java:319)
	at org.springframework.jdbc.support.JdbcUtils.extractDatabaseMetaData(JdbcUtils.java:356)
	at org.springframework.boot.autoconfigure.orm.jpa.DatabaseLookup.getDatabase(DatabaseLookup.java:73)
	at org.springframework.boot.autoconfigure.orm.jpa.JpaProperties.determineDatabase(JpaProperties.java:142)
	at org.springframework.boot.autoconfigure.orm.jpa.JpaBaseConfiguration.jpaVendorAdapter(JpaBaseConfiguration.java:112)
	at org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaConfiguration$$EnhancerBySpringCGLIB$$4f5285a.CGLIB$jpaVendorAdapter$6(<generated>)
	at org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaConfiguration$$EnhancerBySpringCGLIB$$4f5285a$$FastClassBySpringCGLIB$$a574c246.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:244)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:363)
	at org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaConfiguration$$EnhancerBySpringCGLIB$$4f5285a.jpaVendorAdapter(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:154)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:622)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:456)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1321)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1160)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:555)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:515)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:277)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1251)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1171)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:857)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:760)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:509)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1321)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1160)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:555)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:515)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:277)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1251)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1171)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:857)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:760)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:509)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1321)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1160)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:555)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:515)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1105)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:867)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:549)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:140)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:742)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:389)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:311)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1213)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1202)
	at com.karimerri.aladin_api.AladinApiApplication.main(AladinApiApplication.java:13)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49)
2020-04-23 20:53:46 database: opening C:/Users/Amazigh/Documents/GitHub/database/aladin
org.h2.message.DbException: Unknown data type: "TINYINT" [50004-199]
	at org.h2.message.DbException.get(DbException.java:205)
	at org.h2.message.DbException.get(DbException.java:181)
	at org.h2.command.Parser.parseColumnWithType(Parser.java:5524)
	at org.h2.command.Parser.parseColumnForTable(Parser.java:5254)
	at org.h2.command.Parser.parseTableColumnDefinition(Parser.java:7932)
	at org.h2.command.Parser.parseCreateTable(Parser.java:7832)
	at org.h2.command.Parser.parseCreate(Parser.java:5818)
	at org.h2.command.Parser.parsePrepared(Parser.java:846)
	at org.h2.command.Parser.parse(Parser.java:788)
	at org.h2.command.Parser.parse(Parser.java:760)
	at org.h2.command.Parser.prepare(Parser.java:667)
	at org.h2.engine.Session.prepare(Session.java:592)
	at org.h2.engine.Session.prepare(Session.java:576)
	at org.h2.engine.MetaRecord.execute(MetaRecord.java:58)
	at org.h2.engine.Database.open(Database.java:842)
	at org.h2.engine.Database.openDatabase(Database.java:319)
	at org.h2.engine.Database.<init>(Database.java:313)
	at org.h2.engine.Engine.openSession(Engine.java:69)
	at org.h2.engine.Engine.openSession(Engine.java:201)
	at org.h2.engine.Engine.createSessionAndValidate(Engine.java:178)
	at org.h2.engine.Engine.createSession(Engine.java:161)
	at org.h2.engine.Engine.createSession(Engine.java:31)
	at org.h2.engine.SessionRemote.connectEmbeddedOrServer(SessionRemote.java:336)
	at org.h2.jdbc.JdbcConnection.<init>(JdbcConnection.java:169)
	at org.h2.jdbc.JdbcConnection.<init>(JdbcConnection.java:148)
	at org.h2.Driver.connect(Driver.java:69)
	at com.zaxxer.hikari.util.DriverDataSource.getConnection(DriverDataSource.java:136)
	at com.zaxxer.hikari.pool.PoolBase.newConnection(PoolBase.java:369)
	at com.zaxxer.hikari.pool.PoolBase.newPoolEntry(PoolBase.java:198)
	at com.zaxxer.hikari.pool.HikariPool.createPoolEntry(HikariPool.java:467)
	at com.zaxxer.hikari.pool.HikariPool.checkFailFast(HikariPool.java:541)
	at com.zaxxer.hikari.pool.HikariPool.<init>(HikariPool.java:115)
	at com.zaxxer.hikari.HikariDataSource.getConnection(HikariDataSource.java:112)
	at org.springframework.jdbc.datasource.DataSourceUtils.fetchConnection(DataSourceUtils.java:157)
	at org.springframework.jdbc.datasource.DataSourceUtils.doGetConnection(DataSourceUtils.java:115)
	at org.springframework.jdbc.datasource.DataSourceUtils.getConnection(DataSourceUtils.java:78)
	at org.springframework.jdbc.support.JdbcUtils.extractDatabaseMetaData(JdbcUtils.java:319)
	at org.springframework.jdbc.support.JdbcUtils.extractDatabaseMetaData(JdbcUtils.java:356)
	at org.springframework.boot.autoconfigure.orm.jpa.DatabaseLookup.getDatabase(DatabaseLookup.java:73)
	at org.springframework.boot.autoconfigure.orm.jpa.JpaProperties.determineDatabase(JpaProperties.java:142)
	at org.springframework.boot.autoconfigure.orm.jpa.JpaBaseConfiguration.jpaVendorAdapter(JpaBaseConfiguration.java:112)
	at org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaConfiguration$$EnhancerBySpringCGLIB$$4f5285a.CGLIB$jpaVendorAdapter$6(<generated>)
	at org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaConfiguration$$EnhancerBySpringCGLIB$$4f5285a$$FastClassBySpringCGLIB$$a574c246.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:244)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:363)
	at org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaConfiguration$$EnhancerBySpringCGLIB$$4f5285a.jpaVendorAdapter(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:154)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:622)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:456)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1321)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1160)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:555)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:515)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:277)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1251)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1171)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:857)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:760)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:509)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1321)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1160)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:555)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:515)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:277)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1251)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1171)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:857)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:760)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:509)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1321)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1160)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:555)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:515)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1105)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:867)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:549)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:140)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:742)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:389)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:311)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1213)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1202)
	at com.karimerri.aladin_api.AladinApiApplication.main(AladinApiApplication.java:13)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49)
Caused by: org.h2.jdbc.JdbcSQLNonTransientException: Unknown data type: "TINYINT"; SQL statement:
CREATE CACHED TABLE "ALADIN"."PRODUCTS"(
    "ID" INT NOT NULL,
    "PRODUCT_CODE" VARCHAR(25),
    "NAME" VARCHAR(255),
    "OVERVIEW" VARCHAR(255),
    "BROWSING_NAME" VARCHAR(255),
    "DESCRIPTION" VARCHAR(250),
    "STANDARD_COST" DECIMAL(19, 4) DEFAULT '0.0000',
    "LIST_PRICE" DECIMAL(19, 4) DEFAULT '0.0000' NOT NULL,
    "TARGET_LEVEL" INT,
    "REORDER_LEVEL" INT,
    "MINIMUM_REORDER_QUANTITY" INT,
    "QUANTITY_PER_UNIT" VARCHAR(50),
    "DISCONTINUED" TINYINT DEFAULT '0',
    "DEFAULT_IMAGE" VARCHAR(255),
    "CREATED_ON" DATETIME,
    "RANK" INT NOT NULL,
    "SALE_PRICE" DOUBLE,
    "SKU" VARCHAR(255),
    "STATUS" INT,
    "UPDATED_ON" DATETIME
) [50004-199]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:502)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:427)
	... 104 more
2020-04-23 20:53:48 database: CREATE CACHED TABLE "ALADIN"."PRODUCTS"(
    "ID" INT NOT NULL,
    "PRODUCT_CODE" VARCHAR(25),
    "NAME" VARCHAR(255),
    "OVERVIEW" VARCHAR(255),
    "BROWSING_NAME" VARCHAR(255),
    "DESCRIPTION" VARCHAR(250),
    "STANDARD_COST" DECIMAL(19, 4) DEFAULT '0.0000',
    "LIST_PRICE" DECIMAL(19, 4) DEFAULT '0.0000' NOT NULL,
    "TARGET_LEVEL" INT,
    "REORDER_LEVEL" INT,
    "MINIMUM_REORDER_QUANTITY" INT,
    "QUANTITY_PER_UNIT" VARCHAR(50),
    "DISCONTINUED" TINYINT DEFAULT '0',
    "DEFAULT_IMAGE" VARCHAR(255),
    "CREATED_ON" DATETIME,
    "RANK" INT NOT NULL,
    "SALE_PRICE" DOUBLE,
    "SKU" VARCHAR(255),
    "STATUS" INT,
    "UPDATED_ON" DATETIME
)
org.h2.jdbc.JdbcSQLNonTransientException: Unknown data type: "TINYINT"; SQL statement:
CREATE CACHED TABLE "ALADIN"."PRODUCTS"(
    "ID" INT NOT NULL,
    "PRODUCT_CODE" VARCHAR(25),
    "NAME" VARCHAR(255),
    "OVERVIEW" VARCHAR(255),
    "BROWSING_NAME" VARCHAR(255),
    "DESCRIPTION" VARCHAR(250),
    "STANDARD_COST" DECIMAL(19, 4) DEFAULT '0.0000',
    "LIST_PRICE" DECIMAL(19, 4) DEFAULT '0.0000' NOT NULL,
    "TARGET_LEVEL" INT,
    "REORDER_LEVEL" INT,
    "MINIMUM_REORDER_QUANTITY" INT,
    "QUANTITY_PER_UNIT" VARCHAR(50),
    "DISCONTINUED" TINYINT DEFAULT '0',
    "DEFAULT_IMAGE" VARCHAR(255),
    "CREATED_ON" DATETIME,
    "RANK" INT NOT NULL,
    "SALE_PRICE" DOUBLE,
    "SKU" VARCHAR(255),
    "STATUS" INT,
    "UPDATED_ON" DATETIME
) [50004-199]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:502)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:427)
	at org.h2.message.DbException.get(DbException.java:205)
	at org.h2.message.DbException.get(DbException.java:181)
	at org.h2.command.Parser.parseColumnWithType(Parser.java:5524)
	at org.h2.command.Parser.parseColumnForTable(Parser.java:5254)
	at org.h2.command.Parser.parseTableColumnDefinition(Parser.java:7932)
	at org.h2.command.Parser.parseCreateTable(Parser.java:7832)
	at org.h2.command.Parser.parseCreate(Parser.java:5818)
	at org.h2.command.Parser.parsePrepared(Parser.java:846)
	at org.h2.command.Parser.parse(Parser.java:788)
	at org.h2.command.Parser.parse(Parser.java:760)
	at org.h2.command.Parser.prepare(Parser.java:667)
	at org.h2.engine.Session.prepare(Session.java:592)
	at org.h2.engine.Session.prepare(Session.java:576)
	at org.h2.engine.MetaRecord.execute(MetaRecord.java:58)
	at org.h2.engine.Database.open(Database.java:842)
	at org.h2.engine.Database.openDatabase(Database.java:319)
	at org.h2.engine.Database.<init>(Database.java:313)
	at org.h2.engine.Engine.openSession(Engine.java:69)
	at org.h2.engine.Engine.openSession(Engine.java:201)
	at org.h2.engine.Engine.createSessionAndValidate(Engine.java:178)
	at org.h2.engine.Engine.createSession(Engine.java:161)
	at org.h2.engine.Engine.createSession(Engine.java:31)
	at org.h2.engine.SessionRemote.connectEmbeddedOrServer(SessionRemote.java:336)
	at org.h2.jdbc.JdbcConnection.<init>(JdbcConnection.java:169)
	at org.h2.jdbc.JdbcConnection.<init>(JdbcConnection.java:148)
	at org.h2.Driver.connect(Driver.java:69)
	at com.zaxxer.hikari.util.DriverDataSource.getConnection(DriverDataSource.java:136)
	at com.zaxxer.hikari.pool.PoolBase.newConnection(PoolBase.java:369)
	at com.zaxxer.hikari.pool.PoolBase.newPoolEntry(PoolBase.java:198)
	at com.zaxxer.hikari.pool.HikariPool.createPoolEntry(HikariPool.java:467)
	at com.zaxxer.hikari.pool.HikariPool.checkFailFast(HikariPool.java:541)
	at com.zaxxer.hikari.pool.HikariPool.<init>(HikariPool.java:115)
	at com.zaxxer.hikari.HikariDataSource.getConnection(HikariDataSource.java:112)
	at org.hibernate.engine.jdbc.connections.internal.DatasourceConnectionProviderImpl.getConnection(DatasourceConnectionProviderImpl.java:122)
	at org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator$ConnectionProviderJdbcConnectionAccess.obtainConnection(JdbcEnvironmentInitiator.java:180)
	at org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator.initiateService(JdbcEnvironmentInitiator.java:68)
	at org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator.initiateService(JdbcEnvironmentInitiator.java:35)
	at org.hibernate.boot.registry.internal.StandardServiceRegistryImpl.initiateService(StandardServiceRegistryImpl.java:94)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.createService(AbstractServiceRegistryImpl.java:263)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.initializeService(AbstractServiceRegistryImpl.java:237)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.getService(AbstractServiceRegistryImpl.java:214)
	at org.hibernate.id.factory.internal.DefaultIdentifierGeneratorFactory.injectServices(DefaultIdentifierGeneratorFactory.java:152)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.injectDependencies(AbstractServiceRegistryImpl.java:286)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.initializeService(AbstractServiceRegistryImpl.java:243)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.getService(AbstractServiceRegistryImpl.java:214)
	at org.hibernate.boot.internal.InFlightMetadataCollectorImpl.<init>(InFlightMetadataCollectorImpl.java:179)
	at org.hibernate.boot.model.process.spi.MetadataBuildingProcess.complete(MetadataBuildingProcess.java:119)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.metadata(EntityManagerFactoryBuilderImpl.java:904)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.build(EntityManagerFactoryBuilderImpl.java:935)
	at org.springframework.orm.jpa.vendor.SpringHibernateJpaPersistenceProvider.createContainerEntityManagerFactory(SpringHibernateJpaPersistenceProvider.java:57)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:365)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.buildNativeEntityManagerFactory(AbstractEntityManagerFactoryBean.java:390)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:377)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.afterPropertiesSet(LocalContainerEntityManagerFactoryBean.java:341)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1837)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1774)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:593)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:515)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1105)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:867)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:549)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:140)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:742)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:389)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:311)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1213)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1202)
	at com.karimerri.aladin_api.AladinApiApplication.main(AladinApiApplication.java:13)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49)
2020-04-23 20:53:48 database: opening C:/Users/Amazigh/Documents/GitHub/database/aladin
org.h2.message.DbException: Unknown data type: "TINYINT" [50004-199]
	at org.h2.message.DbException.get(DbException.java:205)
	at org.h2.message.DbException.get(DbException.java:181)
	at org.h2.command.Parser.parseColumnWithType(Parser.java:5524)
	at org.h2.command.Parser.parseColumnForTable(Parser.java:5254)
	at org.h2.command.Parser.parseTableColumnDefinition(Parser.java:7932)
	at org.h2.command.Parser.parseCreateTable(Parser.java:7832)
	at org.h2.command.Parser.parseCreate(Parser.java:5818)
	at org.h2.command.Parser.parsePrepared(Parser.java:846)
	at org.h2.command.Parser.parse(Parser.java:788)
	at org.h2.command.Parser.parse(Parser.java:760)
	at org.h2.command.Parser.prepare(Parser.java:667)
	at org.h2.engine.Session.prepare(Session.java:592)
	at org.h2.engine.Session.prepare(Session.java:576)
	at org.h2.engine.MetaRecord.execute(MetaRecord.java:58)
	at org.h2.engine.Database.open(Database.java:842)
	at org.h2.engine.Database.openDatabase(Database.java:319)
	at org.h2.engine.Database.<init>(Database.java:313)
	at org.h2.engine.Engine.openSession(Engine.java:69)
	at org.h2.engine.Engine.openSession(Engine.java:201)
	at org.h2.engine.Engine.createSessionAndValidate(Engine.java:178)
	at org.h2.engine.Engine.createSession(Engine.java:161)
	at org.h2.engine.Engine.createSession(Engine.java:31)
	at org.h2.engine.SessionRemote.connectEmbeddedOrServer(SessionRemote.java:336)
	at org.h2.jdbc.JdbcConnection.<init>(JdbcConnection.java:169)
	at org.h2.jdbc.JdbcConnection.<init>(JdbcConnection.java:148)
	at org.h2.Driver.connect(Driver.java:69)
	at com.zaxxer.hikari.util.DriverDataSource.getConnection(DriverDataSource.java:136)
	at com.zaxxer.hikari.pool.PoolBase.newConnection(PoolBase.java:369)
	at com.zaxxer.hikari.pool.PoolBase.newPoolEntry(PoolBase.java:198)
	at com.zaxxer.hikari.pool.HikariPool.createPoolEntry(HikariPool.java:467)
	at com.zaxxer.hikari.pool.HikariPool.checkFailFast(HikariPool.java:541)
	at com.zaxxer.hikari.pool.HikariPool.<init>(HikariPool.java:115)
	at com.zaxxer.hikari.HikariDataSource.getConnection(HikariDataSource.java:112)
	at org.hibernate.engine.jdbc.connections.internal.DatasourceConnectionProviderImpl.getConnection(DatasourceConnectionProviderImpl.java:122)
	at org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator$ConnectionProviderJdbcConnectionAccess.obtainConnection(JdbcEnvironmentInitiator.java:180)
	at org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator.initiateService(JdbcEnvironmentInitiator.java:68)
	at org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator.initiateService(JdbcEnvironmentInitiator.java:35)
	at org.hibernate.boot.registry.internal.StandardServiceRegistryImpl.initiateService(StandardServiceRegistryImpl.java:94)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.createService(AbstractServiceRegistryImpl.java:263)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.initializeService(AbstractServiceRegistryImpl.java:237)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.getService(AbstractServiceRegistryImpl.java:214)
	at org.hibernate.id.factory.internal.DefaultIdentifierGeneratorFactory.injectServices(DefaultIdentifierGeneratorFactory.java:152)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.injectDependencies(AbstractServiceRegistryImpl.java:286)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.initializeService(AbstractServiceRegistryImpl.java:243)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.getService(AbstractServiceRegistryImpl.java:214)
	at org.hibernate.boot.internal.InFlightMetadataCollectorImpl.<init>(InFlightMetadataCollectorImpl.java:179)
	at org.hibernate.boot.model.process.spi.MetadataBuildingProcess.complete(MetadataBuildingProcess.java:119)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.metadata(EntityManagerFactoryBuilderImpl.java:904)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.build(EntityManagerFactoryBuilderImpl.java:935)
	at org.springframework.orm.jpa.vendor.SpringHibernateJpaPersistenceProvider.createContainerEntityManagerFactory(SpringHibernateJpaPersistenceProvider.java:57)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:365)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.buildNativeEntityManagerFactory(AbstractEntityManagerFactoryBean.java:390)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:377)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.afterPropertiesSet(LocalContainerEntityManagerFactoryBean.java:341)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1837)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1774)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:593)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:515)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1105)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:867)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:549)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:140)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:742)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:389)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:311)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1213)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1202)
	at com.karimerri.aladin_api.AladinApiApplication.main(AladinApiApplication.java:13)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49)
Caused by: org.h2.jdbc.JdbcSQLNonTransientException: Unknown data type: "TINYINT"; SQL statement:
CREATE CACHED TABLE "ALADIN"."PRODUCTS"(
    "ID" INT NOT NULL,
    "PRODUCT_CODE" VARCHAR(25),
    "NAME" VARCHAR(255),
    "OVERVIEW" VARCHAR(255),
    "BROWSING_NAME" VARCHAR(255),
    "DESCRIPTION" VARCHAR(250),
    "STANDARD_COST" DECIMAL(19, 4) DEFAULT '0.0000',
    "LIST_PRICE" DECIMAL(19, 4) DEFAULT '0.0000' NOT NULL,
    "TARGET_LEVEL" INT,
    "REORDER_LEVEL" INT,
    "MINIMUM_REORDER_QUANTITY" INT,
    "QUANTITY_PER_UNIT" VARCHAR(50),
    "DISCONTINUED" TINYINT DEFAULT '0',
    "DEFAULT_IMAGE" VARCHAR(255),
    "CREATED_ON" DATETIME,
    "RANK" INT NOT NULL,
    "SALE_PRICE" DOUBLE,
    "SKU" VARCHAR(255),
    "STATUS" INT,
    "UPDATED_ON" DATETIME
) [50004-199]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:502)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:427)
	... 77 more
2020-04-23 20:54:50 database: CREATE CACHED TABLE "ALADIN"."PRODUCTS"(
    "ID" INT NOT NULL,
    "PRODUCT_CODE" VARCHAR(25),
    "NAME" VARCHAR(255),
    "OVERVIEW" VARCHAR(255),
    "BROWSING_NAME" VARCHAR(255),
    "DESCRIPTION" VARCHAR(250),
    "STANDARD_COST" DECIMAL(19, 4) DEFAULT '0.0000',
    "LIST_PRICE" DECIMAL(19, 4) DEFAULT '0.0000' NOT NULL,
    "TARGET_LEVEL" INT,
    "REORDER_LEVEL" INT,
    "MINIMUM_REORDER_QUANTITY" INT,
    "QUANTITY_PER_UNIT" VARCHAR(50),
    "DISCONTINUED" TINYINT DEFAULT '0',
    "DEFAULT_IMAGE" VARCHAR(255),
    "CREATED_ON" DATETIME,
    "RANK" INT NOT NULL,
    "SALE_PRICE" DOUBLE,
    "SKU" VARCHAR(255),
    "STATUS" INT,
    "UPDATED_ON" DATETIME
)
org.h2.jdbc.JdbcSQLNonTransientException: Unknown data type: "TINYINT"; SQL statement:
CREATE CACHED TABLE "ALADIN"."PRODUCTS"(
    "ID" INT NOT NULL,
    "PRODUCT_CODE" VARCHAR(25),
    "NAME" VARCHAR(255),
    "OVERVIEW" VARCHAR(255),
    "BROWSING_NAME" VARCHAR(255),
    "DESCRIPTION" VARCHAR(250),
    "STANDARD_COST" DECIMAL(19, 4) DEFAULT '0.0000',
    "LIST_PRICE" DECIMAL(19, 4) DEFAULT '0.0000' NOT NULL,
    "TARGET_LEVEL" INT,
    "REORDER_LEVEL" INT,
    "MINIMUM_REORDER_QUANTITY" INT,
    "QUANTITY_PER_UNIT" VARCHAR(50),
    "DISCONTINUED" TINYINT DEFAULT '0',
    "DEFAULT_IMAGE" VARCHAR(255),
    "CREATED_ON" DATETIME,
    "RANK" INT NOT NULL,
    "SALE_PRICE" DOUBLE,
    "SKU" VARCHAR(255),
    "STATUS" INT,
    "UPDATED_ON" DATETIME
) [50004-199]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:502)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:427)
	at org.h2.message.DbException.get(DbException.java:205)
	at org.h2.message.DbException.get(DbException.java:181)
	at org.h2.command.Parser.parseColumnWithType(Parser.java:5524)
	at org.h2.command.Parser.parseColumnForTable(Parser.java:5254)
	at org.h2.command.Parser.parseTableColumnDefinition(Parser.java:7932)
	at org.h2.command.Parser.parseCreateTable(Parser.java:7832)
	at org.h2.command.Parser.parseCreate(Parser.java:5818)
	at org.h2.command.Parser.parsePrepared(Parser.java:846)
	at org.h2.command.Parser.parse(Parser.java:788)
	at org.h2.command.Parser.parse(Parser.java:760)
	at org.h2.command.Parser.prepare(Parser.java:667)
	at org.h2.engine.Session.prepare(Session.java:592)
	at org.h2.engine.Session.prepare(Session.java:576)
	at org.h2.engine.MetaRecord.execute(MetaRecord.java:58)
	at org.h2.engine.Database.open(Database.java:842)
	at org.h2.engine.Database.openDatabase(Database.java:319)
	at org.h2.engine.Database.<init>(Database.java:313)
	at org.h2.engine.Engine.openSession(Engine.java:69)
	at org.h2.engine.Engine.openSession(Engine.java:201)
	at org.h2.engine.Engine.createSessionAndValidate(Engine.java:178)
	at org.h2.engine.Engine.createSession(Engine.java:161)
	at org.h2.engine.Engine.createSession(Engine.java:31)
	at org.h2.engine.SessionRemote.connectEmbeddedOrServer(SessionRemote.java:336)
	at org.h2.jdbc.JdbcConnection.<init>(JdbcConnection.java:169)
	at org.h2.jdbc.JdbcConnection.<init>(JdbcConnection.java:148)
	at org.h2.Driver.connect(Driver.java:69)
	at com.zaxxer.hikari.util.DriverDataSource.getConnection(DriverDataSource.java:136)
	at com.zaxxer.hikari.pool.PoolBase.newConnection(PoolBase.java:369)
	at com.zaxxer.hikari.pool.PoolBase.newPoolEntry(PoolBase.java:198)
	at com.zaxxer.hikari.pool.HikariPool.createPoolEntry(HikariPool.java:467)
	at com.zaxxer.hikari.pool.HikariPool.checkFailFast(HikariPool.java:541)
	at com.zaxxer.hikari.pool.HikariPool.<init>(HikariPool.java:115)
	at com.zaxxer.hikari.HikariDataSource.getConnection(HikariDataSource.java:112)
	at org.springframework.jdbc.datasource.DataSourceUtils.fetchConnection(DataSourceUtils.java:157)
	at org.springframework.jdbc.datasource.DataSourceUtils.doGetConnection(DataSourceUtils.java:115)
	at org.springframework.jdbc.datasource.DataSourceUtils.getConnection(DataSourceUtils.java:78)
	at org.springframework.jdbc.support.JdbcUtils.extractDatabaseMetaData(JdbcUtils.java:319)
	at org.springframework.jdbc.support.JdbcUtils.extractDatabaseMetaData(JdbcUtils.java:356)
	at org.springframework.boot.autoconfigure.orm.jpa.DatabaseLookup.getDatabase(DatabaseLookup.java:73)
	at org.springframework.boot.autoconfigure.orm.jpa.JpaProperties.determineDatabase(JpaProperties.java:142)
	at org.springframework.boot.autoconfigure.orm.jpa.JpaBaseConfiguration.jpaVendorAdapter(JpaBaseConfiguration.java:112)
	at org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaConfiguration$$EnhancerBySpringCGLIB$$ccae1202.CGLIB$jpaVendorAdapter$6(<generated>)
	at org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaConfiguration$$EnhancerBySpringCGLIB$$ccae1202$$FastClassBySpringCGLIB$$caa8bc16.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:244)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:363)
	at org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaConfiguration$$EnhancerBySpringCGLIB$$ccae1202.jpaVendorAdapter(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:154)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:622)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:456)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1321)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1160)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:555)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:515)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:277)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1251)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1171)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:857)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:760)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:509)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1321)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1160)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:555)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:515)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:277)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1251)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1171)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:857)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:760)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:509)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1321)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1160)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:555)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:515)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1105)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:867)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:549)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:140)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:742)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:389)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:311)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1213)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1202)
	at com.karimerri.aladin_api.AladinApiApplication.main(AladinApiApplication.java:13)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49)
2020-04-23 20:54:50 database: opening C:/Users/Amazigh/Documents/GitHub/database/aladin
org.h2.message.DbException: Unknown data type: "TINYINT" [50004-199]
	at org.h2.message.DbException.get(DbException.java:205)
	at org.h2.message.DbException.get(DbException.java:181)
	at org.h2.command.Parser.parseColumnWithType(Parser.java:5524)
	at org.h2.command.Parser.parseColumnForTable(Parser.java:5254)
	at org.h2.command.Parser.parseTableColumnDefinition(Parser.java:7932)
	at org.h2.command.Parser.parseCreateTable(Parser.java:7832)
	at org.h2.command.Parser.parseCreate(Parser.java:5818)
	at org.h2.command.Parser.parsePrepared(Parser.java:846)
	at org.h2.command.Parser.parse(Parser.java:788)
	at org.h2.command.Parser.parse(Parser.java:760)
	at org.h2.command.Parser.prepare(Parser.java:667)
	at org.h2.engine.Session.prepare(Session.java:592)
	at org.h2.engine.Session.prepare(Session.java:576)
	at org.h2.engine.MetaRecord.execute(MetaRecord.java:58)
	at org.h2.engine.Database.open(Database.java:842)
	at org.h2.engine.Database.openDatabase(Database.java:319)
	at org.h2.engine.Database.<init>(Database.java:313)
	at org.h2.engine.Engine.openSession(Engine.java:69)
	at org.h2.engine.Engine.openSession(Engine.java:201)
	at org.h2.engine.Engine.createSessionAndValidate(Engine.java:178)
	at org.h2.engine.Engine.createSession(Engine.java:161)
	at org.h2.engine.Engine.createSession(Engine.java:31)
	at org.h2.engine.SessionRemote.connectEmbeddedOrServer(SessionRemote.java:336)
	at org.h2.jdbc.JdbcConnection.<init>(JdbcConnection.java:169)
	at org.h2.jdbc.JdbcConnection.<init>(JdbcConnection.java:148)
	at org.h2.Driver.connect(Driver.java:69)
	at com.zaxxer.hikari.util.DriverDataSource.getConnection(DriverDataSource.java:136)
	at com.zaxxer.hikari.pool.PoolBase.newConnection(PoolBase.java:369)
	at com.zaxxer.hikari.pool.PoolBase.newPoolEntry(PoolBase.java:198)
	at com.zaxxer.hikari.pool.HikariPool.createPoolEntry(HikariPool.java:467)
	at com.zaxxer.hikari.pool.HikariPool.checkFailFast(HikariPool.java:541)
	at com.zaxxer.hikari.pool.HikariPool.<init>(HikariPool.java:115)
	at com.zaxxer.hikari.HikariDataSource.getConnection(HikariDataSource.java:112)
	at org.springframework.jdbc.datasource.DataSourceUtils.fetchConnection(DataSourceUtils.java:157)
	at org.springframework.jdbc.datasource.DataSourceUtils.doGetConnection(DataSourceUtils.java:115)
	at org.springframework.jdbc.datasource.DataSourceUtils.getConnection(DataSourceUtils.java:78)
	at org.springframework.jdbc.support.JdbcUtils.extractDatabaseMetaData(JdbcUtils.java:319)
	at org.springframework.jdbc.support.JdbcUtils.extractDatabaseMetaData(JdbcUtils.java:356)
	at org.springframework.boot.autoconfigure.orm.jpa.DatabaseLookup.getDatabase(DatabaseLookup.java:73)
	at org.springframework.boot.autoconfigure.orm.jpa.JpaProperties.determineDatabase(JpaProperties.java:142)
	at org.springframework.boot.autoconfigure.orm.jpa.JpaBaseConfiguration.jpaVendorAdapter(JpaBaseConfiguration.java:112)
	at org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaConfiguration$$EnhancerBySpringCGLIB$$ccae1202.CGLIB$jpaVendorAdapter$6(<generated>)
	at org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaConfiguration$$EnhancerBySpringCGLIB$$ccae1202$$FastClassBySpringCGLIB$$caa8bc16.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:244)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:363)
	at org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaConfiguration$$EnhancerBySpringCGLIB$$ccae1202.jpaVendorAdapter(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:154)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:622)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:456)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1321)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1160)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:555)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:515)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:277)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1251)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1171)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:857)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:760)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:509)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1321)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1160)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:555)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:515)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:277)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1251)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1171)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:857)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:760)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:509)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1321)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1160)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:555)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:515)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1105)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:867)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:549)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:140)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:742)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:389)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:311)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1213)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1202)
	at com.karimerri.aladin_api.AladinApiApplication.main(AladinApiApplication.java:13)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49)
Caused by: org.h2.jdbc.JdbcSQLNonTransientException: Unknown data type: "TINYINT"; SQL statement:
CREATE CACHED TABLE "ALADIN"."PRODUCTS"(
    "ID" INT NOT NULL,
    "PRODUCT_CODE" VARCHAR(25),
    "NAME" VARCHAR(255),
    "OVERVIEW" VARCHAR(255),
    "BROWSING_NAME" VARCHAR(255),
    "DESCRIPTION" VARCHAR(250),
    "STANDARD_COST" DECIMAL(19, 4) DEFAULT '0.0000',
    "LIST_PRICE" DECIMAL(19, 4) DEFAULT '0.0000' NOT NULL,
    "TARGET_LEVEL" INT,
    "REORDER_LEVEL" INT,
    "MINIMUM_REORDER_QUANTITY" INT,
    "QUANTITY_PER_UNIT" VARCHAR(50),
    "DISCONTINUED" TINYINT DEFAULT '0',
    "DEFAULT_IMAGE" VARCHAR(255),
    "CREATED_ON" DATETIME,
    "RANK" INT NOT NULL,
    "SALE_PRICE" DOUBLE,
    "SKU" VARCHAR(255),
    "STATUS" INT,
    "UPDATED_ON" DATETIME
) [50004-199]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:502)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:427)
	... 104 more
2020-04-23 20:54:52 database: CREATE CACHED TABLE "ALADIN"."PRODUCTS"(
    "ID" INT NOT NULL,
    "PRODUCT_CODE" VARCHAR(25),
    "NAME" VARCHAR(255),
    "OVERVIEW" VARCHAR(255),
    "BROWSING_NAME" VARCHAR(255),
    "DESCRIPTION" VARCHAR(250),
    "STANDARD_COST" DECIMAL(19, 4) DEFAULT '0.0000',
    "LIST_PRICE" DECIMAL(19, 4) DEFAULT '0.0000' NOT NULL,
    "TARGET_LEVEL" INT,
    "REORDER_LEVEL" INT,
    "MINIMUM_REORDER_QUANTITY" INT,
    "QUANTITY_PER_UNIT" VARCHAR(50),
    "DISCONTINUED" TINYINT DEFAULT '0',
    "DEFAULT_IMAGE" VARCHAR(255),
    "CREATED_ON" DATETIME,
    "RANK" INT NOT NULL,
    "SALE_PRICE" DOUBLE,
    "SKU" VARCHAR(255),
    "STATUS" INT,
    "UPDATED_ON" DATETIME
)
org.h2.jdbc.JdbcSQLNonTransientException: Unknown data type: "TINYINT"; SQL statement:
CREATE CACHED TABLE "ALADIN"."PRODUCTS"(
    "ID" INT NOT NULL,
    "PRODUCT_CODE" VARCHAR(25),
    "NAME" VARCHAR(255),
    "OVERVIEW" VARCHAR(255),
    "BROWSING_NAME" VARCHAR(255),
    "DESCRIPTION" VARCHAR(250),
    "STANDARD_COST" DECIMAL(19, 4) DEFAULT '0.0000',
    "LIST_PRICE" DECIMAL(19, 4) DEFAULT '0.0000' NOT NULL,
    "TARGET_LEVEL" INT,
    "REORDER_LEVEL" INT,
    "MINIMUM_REORDER_QUANTITY" INT,
    "QUANTITY_PER_UNIT" VARCHAR(50),
    "DISCONTINUED" TINYINT DEFAULT '0',
    "DEFAULT_IMAGE" VARCHAR(255),
    "CREATED_ON" DATETIME,
    "RANK" INT NOT NULL,
    "SALE_PRICE" DOUBLE,
    "SKU" VARCHAR(255),
    "STATUS" INT,
    "UPDATED_ON" DATETIME
) [50004-199]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:502)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:427)
	at org.h2.message.DbException.get(DbException.java:205)
	at org.h2.message.DbException.get(DbException.java:181)
	at org.h2.command.Parser.parseColumnWithType(Parser.java:5524)
	at org.h2.command.Parser.parseColumnForTable(Parser.java:5254)
	at org.h2.command.Parser.parseTableColumnDefinition(Parser.java:7932)
	at org.h2.command.Parser.parseCreateTable(Parser.java:7832)
	at org.h2.command.Parser.parseCreate(Parser.java:5818)
	at org.h2.command.Parser.parsePrepared(Parser.java:846)
	at org.h2.command.Parser.parse(Parser.java:788)
	at org.h2.command.Parser.parse(Parser.java:760)
	at org.h2.command.Parser.prepare(Parser.java:667)
	at org.h2.engine.Session.prepare(Session.java:592)
	at org.h2.engine.Session.prepare(Session.java:576)
	at org.h2.engine.MetaRecord.execute(MetaRecord.java:58)
	at org.h2.engine.Database.open(Database.java:842)
	at org.h2.engine.Database.openDatabase(Database.java:319)
	at org.h2.engine.Database.<init>(Database.java:313)
	at org.h2.engine.Engine.openSession(Engine.java:69)
	at org.h2.engine.Engine.openSession(Engine.java:201)
	at org.h2.engine.Engine.createSessionAndValidate(Engine.java:178)
	at org.h2.engine.Engine.createSession(Engine.java:161)
	at org.h2.engine.Engine.createSession(Engine.java:31)
	at org.h2.engine.SessionRemote.connectEmbeddedOrServer(SessionRemote.java:336)
	at org.h2.jdbc.JdbcConnection.<init>(JdbcConnection.java:169)
	at org.h2.jdbc.JdbcConnection.<init>(JdbcConnection.java:148)
	at org.h2.Driver.connect(Driver.java:69)
	at com.zaxxer.hikari.util.DriverDataSource.getConnection(DriverDataSource.java:136)
	at com.zaxxer.hikari.pool.PoolBase.newConnection(PoolBase.java:369)
	at com.zaxxer.hikari.pool.PoolBase.newPoolEntry(PoolBase.java:198)
	at com.zaxxer.hikari.pool.HikariPool.createPoolEntry(HikariPool.java:467)
	at com.zaxxer.hikari.pool.HikariPool.checkFailFast(HikariPool.java:541)
	at com.zaxxer.hikari.pool.HikariPool.<init>(HikariPool.java:115)
	at com.zaxxer.hikari.HikariDataSource.getConnection(HikariDataSource.java:112)
	at org.hibernate.engine.jdbc.connections.internal.DatasourceConnectionProviderImpl.getConnection(DatasourceConnectionProviderImpl.java:122)
	at org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator$ConnectionProviderJdbcConnectionAccess.obtainConnection(JdbcEnvironmentInitiator.java:180)
	at org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator.initiateService(JdbcEnvironmentInitiator.java:68)
	at org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator.initiateService(JdbcEnvironmentInitiator.java:35)
	at org.hibernate.boot.registry.internal.StandardServiceRegistryImpl.initiateService(StandardServiceRegistryImpl.java:94)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.createService(AbstractServiceRegistryImpl.java:263)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.initializeService(AbstractServiceRegistryImpl.java:237)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.getService(AbstractServiceRegistryImpl.java:214)
	at org.hibernate.id.factory.internal.DefaultIdentifierGeneratorFactory.injectServices(DefaultIdentifierGeneratorFactory.java:152)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.injectDependencies(AbstractServiceRegistryImpl.java:286)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.initializeService(AbstractServiceRegistryImpl.java:243)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.getService(AbstractServiceRegistryImpl.java:214)
	at org.hibernate.boot.internal.InFlightMetadataCollectorImpl.<init>(InFlightMetadataCollectorImpl.java:179)
	at org.hibernate.boot.model.process.spi.MetadataBuildingProcess.complete(MetadataBuildingProcess.java:119)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.metadata(EntityManagerFactoryBuilderImpl.java:904)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.build(EntityManagerFactoryBuilderImpl.java:935)
	at org.springframework.orm.jpa.vendor.SpringHibernateJpaPersistenceProvider.createContainerEntityManagerFactory(SpringHibernateJpaPersistenceProvider.java:57)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:365)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.buildNativeEntityManagerFactory(AbstractEntityManagerFactoryBean.java:390)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:377)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.afterPropertiesSet(LocalContainerEntityManagerFactoryBean.java:341)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1837)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1774)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:593)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:515)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1105)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:867)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:549)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:140)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:742)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:389)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:311)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1213)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1202)
	at com.karimerri.aladin_api.AladinApiApplication.main(AladinApiApplication.java:13)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49)
2020-04-23 20:54:52 database: opening C:/Users/Amazigh/Documents/GitHub/database/aladin
org.h2.message.DbException: Unknown data type: "TINYINT" [50004-199]
	at org.h2.message.DbException.get(DbException.java:205)
	at org.h2.message.DbException.get(DbException.java:181)
	at org.h2.command.Parser.parseColumnWithType(Parser.java:5524)
	at org.h2.command.Parser.parseColumnForTable(Parser.java:5254)
	at org.h2.command.Parser.parseTableColumnDefinition(Parser.java:7932)
	at org.h2.command.Parser.parseCreateTable(Parser.java:7832)
	at org.h2.command.Parser.parseCreate(Parser.java:5818)
	at org.h2.command.Parser.parsePrepared(Parser.java:846)
	at org.h2.command.Parser.parse(Parser.java:788)
	at org.h2.command.Parser.parse(Parser.java:760)
	at org.h2.command.Parser.prepare(Parser.java:667)
	at org.h2.engine.Session.prepare(Session.java:592)
	at org.h2.engine.Session.prepare(Session.java:576)
	at org.h2.engine.MetaRecord.execute(MetaRecord.java:58)
	at org.h2.engine.Database.open(Database.java:842)
	at org.h2.engine.Database.openDatabase(Database.java:319)
	at org.h2.engine.Database.<init>(Database.java:313)
	at org.h2.engine.Engine.openSession(Engine.java:69)
	at org.h2.engine.Engine.openSession(Engine.java:201)
	at org.h2.engine.Engine.createSessionAndValidate(Engine.java:178)
	at org.h2.engine.Engine.createSession(Engine.java:161)
	at org.h2.engine.Engine.createSession(Engine.java:31)
	at org.h2.engine.SessionRemote.connectEmbeddedOrServer(SessionRemote.java:336)
	at org.h2.jdbc.JdbcConnection.<init>(JdbcConnection.java:169)
	at org.h2.jdbc.JdbcConnection.<init>(JdbcConnection.java:148)
	at org.h2.Driver.connect(Driver.java:69)
	at com.zaxxer.hikari.util.DriverDataSource.getConnection(DriverDataSource.java:136)
	at com.zaxxer.hikari.pool.PoolBase.newConnection(PoolBase.java:369)
	at com.zaxxer.hikari.pool.PoolBase.newPoolEntry(PoolBase.java:198)
	at com.zaxxer.hikari.pool.HikariPool.createPoolEntry(HikariPool.java:467)
	at com.zaxxer.hikari.pool.HikariPool.checkFailFast(HikariPool.java:541)
	at com.zaxxer.hikari.pool.HikariPool.<init>(HikariPool.java:115)
	at com.zaxxer.hikari.HikariDataSource.getConnection(HikariDataSource.java:112)
	at org.hibernate.engine.jdbc.connections.internal.DatasourceConnectionProviderImpl.getConnection(DatasourceConnectionProviderImpl.java:122)
	at org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator$ConnectionProviderJdbcConnectionAccess.obtainConnection(JdbcEnvironmentInitiator.java:180)
	at org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator.initiateService(JdbcEnvironmentInitiator.java:68)
	at org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator.initiateService(JdbcEnvironmentInitiator.java:35)
	at org.hibernate.boot.registry.internal.StandardServiceRegistryImpl.initiateService(StandardServiceRegistryImpl.java:94)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.createService(AbstractServiceRegistryImpl.java:263)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.initializeService(AbstractServiceRegistryImpl.java:237)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.getService(AbstractServiceRegistryImpl.java:214)
	at org.hibernate.id.factory.internal.DefaultIdentifierGeneratorFactory.injectServices(DefaultIdentifierGeneratorFactory.java:152)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.injectDependencies(AbstractServiceRegistryImpl.java:286)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.initializeService(AbstractServiceRegistryImpl.java:243)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.getService(AbstractServiceRegistryImpl.java:214)
	at org.hibernate.boot.internal.InFlightMetadataCollectorImpl.<init>(InFlightMetadataCollectorImpl.java:179)
	at org.hibernate.boot.model.process.spi.MetadataBuildingProcess.complete(MetadataBuildingProcess.java:119)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.metadata(EntityManagerFactoryBuilderImpl.java:904)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.build(EntityManagerFactoryBuilderImpl.java:935)
	at org.springframework.orm.jpa.vendor.SpringHibernateJpaPersistenceProvider.createContainerEntityManagerFactory(SpringHibernateJpaPersistenceProvider.java:57)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:365)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.buildNativeEntityManagerFactory(AbstractEntityManagerFactoryBean.java:390)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:377)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.afterPropertiesSet(LocalContainerEntityManagerFactoryBean.java:341)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1837)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1774)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:593)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:515)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1105)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:867)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:549)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:140)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:742)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:389)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:311)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1213)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1202)
	at com.karimerri.aladin_api.AladinApiApplication.main(AladinApiApplication.java:13)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49)
Caused by: org.h2.jdbc.JdbcSQLNonTransientException: Unknown data type: "TINYINT"; SQL statement:
CREATE CACHED TABLE "ALADIN"."PRODUCTS"(
    "ID" INT NOT NULL,
    "PRODUCT_CODE" VARCHAR(25),
    "NAME" VARCHAR(255),
    "OVERVIEW" VARCHAR(255),
    "BROWSING_NAME" VARCHAR(255),
    "DESCRIPTION" VARCHAR(250),
    "STANDARD_COST" DECIMAL(19, 4) DEFAULT '0.0000',
    "LIST_PRICE" DECIMAL(19, 4) DEFAULT '0.0000' NOT NULL,
    "TARGET_LEVEL" INT,
    "REORDER_LEVEL" INT,
    "MINIMUM_REORDER_QUANTITY" INT,
    "QUANTITY_PER_UNIT" VARCHAR(50),
    "DISCONTINUED" TINYINT DEFAULT '0',
    "DEFAULT_IMAGE" VARCHAR(255),
    "CREATED_ON" DATETIME,
    "RANK" INT NOT NULL,
    "SALE_PRICE" DOUBLE,
    "SKU" VARCHAR(255),
    "STATUS" INT,
    "UPDATED_ON" DATETIME
) [50004-199]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:502)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:427)
	... 77 more
2020-04-23 20:57:43 database: CREATE CACHED TABLE "ALADIN"."PRODUCTS"(
    "ID" INT NOT NULL,
    "PRODUCT_CODE" VARCHAR(25),
    "NAME" VARCHAR(255),
    "OVERVIEW" VARCHAR(255),
    "BROWSING_NAME" VARCHAR(255),
    "DESCRIPTION" VARCHAR(250),
    "STANDARD_COST" DECIMAL(19, 4) DEFAULT '0.0000',
    "LIST_PRICE" DECIMAL(19, 4) DEFAULT '0.0000' NOT NULL,
    "TARGET_LEVEL" INT,
    "REORDER_LEVEL" INT,
    "MINIMUM_REORDER_QUANTITY" INT,
    "QUANTITY_PER_UNIT" VARCHAR(50),
    "DISCONTINUED" TINYINT DEFAULT '0',
    "DEFAULT_IMAGE" VARCHAR(255),
    "CREATED_ON" DATETIME,
    "RANK" INT NOT NULL,
    "SALE_PRICE" DOUBLE,
    "SKU" VARCHAR(255),
    "STATUS" INT,
    "UPDATED_ON" DATETIME
)
org.h2.jdbc.JdbcSQLNonTransientException: Unknown data type: "TINYINT"; SQL statement:
CREATE CACHED TABLE "ALADIN"."PRODUCTS"(
    "ID" INT NOT NULL,
    "PRODUCT_CODE" VARCHAR(25),
    "NAME" VARCHAR(255),
    "OVERVIEW" VARCHAR(255),
    "BROWSING_NAME" VARCHAR(255),
    "DESCRIPTION" VARCHAR(250),
    "STANDARD_COST" DECIMAL(19, 4) DEFAULT '0.0000',
    "LIST_PRICE" DECIMAL(19, 4) DEFAULT '0.0000' NOT NULL,
    "TARGET_LEVEL" INT,
    "REORDER_LEVEL" INT,
    "MINIMUM_REORDER_QUANTITY" INT,
    "QUANTITY_PER_UNIT" VARCHAR(50),
    "DISCONTINUED" TINYINT DEFAULT '0',
    "DEFAULT_IMAGE" VARCHAR(255),
    "CREATED_ON" DATETIME,
    "RANK" INT NOT NULL,
    "SALE_PRICE" DOUBLE,
    "SKU" VARCHAR(255),
    "STATUS" INT,
    "UPDATED_ON" DATETIME
) [50004-199]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:502)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:427)
	at org.h2.message.DbException.get(DbException.java:205)
	at org.h2.message.DbException.get(DbException.java:181)
	at org.h2.command.Parser.parseColumnWithType(Parser.java:5524)
	at org.h2.command.Parser.parseColumnForTable(Parser.java:5254)
	at org.h2.command.Parser.parseTableColumnDefinition(Parser.java:7932)
	at org.h2.command.Parser.parseCreateTable(Parser.java:7832)
	at org.h2.command.Parser.parseCreate(Parser.java:5818)
	at org.h2.command.Parser.parsePrepared(Parser.java:846)
	at org.h2.command.Parser.parse(Parser.java:788)
	at org.h2.command.Parser.parse(Parser.java:760)
	at org.h2.command.Parser.prepare(Parser.java:667)
	at org.h2.engine.Session.prepare(Session.java:592)
	at org.h2.engine.Session.prepare(Session.java:576)
	at org.h2.engine.MetaRecord.execute(MetaRecord.java:58)
	at org.h2.engine.Database.open(Database.java:842)
	at org.h2.engine.Database.openDatabase(Database.java:319)
	at org.h2.engine.Database.<init>(Database.java:313)
	at org.h2.engine.Engine.openSession(Engine.java:69)
	at org.h2.engine.Engine.openSession(Engine.java:201)
	at org.h2.engine.Engine.createSessionAndValidate(Engine.java:178)
	at org.h2.engine.Engine.createSession(Engine.java:161)
	at org.h2.engine.Engine.createSession(Engine.java:31)
	at org.h2.engine.SessionRemote.connectEmbeddedOrServer(SessionRemote.java:336)
	at org.h2.jdbc.JdbcConnection.<init>(JdbcConnection.java:169)
	at org.h2.jdbc.JdbcConnection.<init>(JdbcConnection.java:148)
	at org.h2.Driver.connect(Driver.java:69)
	at com.zaxxer.hikari.util.DriverDataSource.getConnection(DriverDataSource.java:136)
	at com.zaxxer.hikari.pool.PoolBase.newConnection(PoolBase.java:369)
	at com.zaxxer.hikari.pool.PoolBase.newPoolEntry(PoolBase.java:198)
	at com.zaxxer.hikari.pool.HikariPool.createPoolEntry(HikariPool.java:467)
	at com.zaxxer.hikari.pool.HikariPool.checkFailFast(HikariPool.java:541)
	at com.zaxxer.hikari.pool.HikariPool.<init>(HikariPool.java:115)
	at com.zaxxer.hikari.HikariDataSource.getConnection(HikariDataSource.java:112)
	at org.springframework.jdbc.datasource.DataSourceUtils.fetchConnection(DataSourceUtils.java:157)
	at org.springframework.jdbc.datasource.DataSourceUtils.doGetConnection(DataSourceUtils.java:115)
	at org.springframework.jdbc.datasource.DataSourceUtils.getConnection(DataSourceUtils.java:78)
	at org.springframework.jdbc.support.JdbcUtils.extractDatabaseMetaData(JdbcUtils.java:319)
	at org.springframework.jdbc.support.JdbcUtils.extractDatabaseMetaData(JdbcUtils.java:356)
	at org.springframework.boot.autoconfigure.orm.jpa.DatabaseLookup.getDatabase(DatabaseLookup.java:73)
	at org.springframework.boot.autoconfigure.orm.jpa.JpaProperties.determineDatabase(JpaProperties.java:142)
	at org.springframework.boot.autoconfigure.orm.jpa.JpaBaseConfiguration.jpaVendorAdapter(JpaBaseConfiguration.java:112)
	at org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaConfiguration$$EnhancerBySpringCGLIB$$7de2ed78.CGLIB$jpaVendorAdapter$7(<generated>)
	at org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaConfiguration$$EnhancerBySpringCGLIB$$7de2ed78$$FastClassBySpringCGLIB$$28f854a9.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:244)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:363)
	at org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaConfiguration$$EnhancerBySpringCGLIB$$7de2ed78.jpaVendorAdapter(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:154)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:622)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:456)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1321)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1160)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:555)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:515)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:277)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1251)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1171)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:857)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:760)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:509)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1321)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1160)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:555)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:515)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:277)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1251)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1171)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:857)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:760)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:509)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1321)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1160)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:555)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:515)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1105)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:867)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:549)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:140)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:742)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:389)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:311)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1213)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1202)
	at com.karimerri.aladin_api.AladinApiApplication.main(AladinApiApplication.java:13)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49)
2020-04-23 20:57:43 database: opening C:/Users/Amazigh/Documents/GitHub/database/aladin
org.h2.message.DbException: Unknown data type: "TINYINT" [50004-199]
	at org.h2.message.DbException.get(DbException.java:205)
	at org.h2.message.DbException.get(DbException.java:181)
	at org.h2.command.Parser.parseColumnWithType(Parser.java:5524)
	at org.h2.command.Parser.parseColumnForTable(Parser.java:5254)
	at org.h2.command.Parser.parseTableColumnDefinition(Parser.java:7932)
	at org.h2.command.Parser.parseCreateTable(Parser.java:7832)
	at org.h2.command.Parser.parseCreate(Parser.java:5818)
	at org.h2.command.Parser.parsePrepared(Parser.java:846)
	at org.h2.command.Parser.parse(Parser.java:788)
	at org.h2.command.Parser.parse(Parser.java:760)
	at org.h2.command.Parser.prepare(Parser.java:667)
	at org.h2.engine.Session.prepare(Session.java:592)
	at org.h2.engine.Session.prepare(Session.java:576)
	at org.h2.engine.MetaRecord.execute(MetaRecord.java:58)
	at org.h2.engine.Database.open(Database.java:842)
	at org.h2.engine.Database.openDatabase(Database.java:319)
	at org.h2.engine.Database.<init>(Database.java:313)
	at org.h2.engine.Engine.openSession(Engine.java:69)
	at org.h2.engine.Engine.openSession(Engine.java:201)
	at org.h2.engine.Engine.createSessionAndValidate(Engine.java:178)
	at org.h2.engine.Engine.createSession(Engine.java:161)
	at org.h2.engine.Engine.createSession(Engine.java:31)
	at org.h2.engine.SessionRemote.connectEmbeddedOrServer(SessionRemote.java:336)
	at org.h2.jdbc.JdbcConnection.<init>(JdbcConnection.java:169)
	at org.h2.jdbc.JdbcConnection.<init>(JdbcConnection.java:148)
	at org.h2.Driver.connect(Driver.java:69)
	at com.zaxxer.hikari.util.DriverDataSource.getConnection(DriverDataSource.java:136)
	at com.zaxxer.hikari.pool.PoolBase.newConnection(PoolBase.java:369)
	at com.zaxxer.hikari.pool.PoolBase.newPoolEntry(PoolBase.java:198)
	at com.zaxxer.hikari.pool.HikariPool.createPoolEntry(HikariPool.java:467)
	at com.zaxxer.hikari.pool.HikariPool.checkFailFast(HikariPool.java:541)
	at com.zaxxer.hikari.pool.HikariPool.<init>(HikariPool.java:115)
	at com.zaxxer.hikari.HikariDataSource.getConnection(HikariDataSource.java:112)
	at org.springframework.jdbc.datasource.DataSourceUtils.fetchConnection(DataSourceUtils.java:157)
	at org.springframework.jdbc.datasource.DataSourceUtils.doGetConnection(DataSourceUtils.java:115)
	at org.springframework.jdbc.datasource.DataSourceUtils.getConnection(DataSourceUtils.java:78)
	at org.springframework.jdbc.support.JdbcUtils.extractDatabaseMetaData(JdbcUtils.java:319)
	at org.springframework.jdbc.support.JdbcUtils.extractDatabaseMetaData(JdbcUtils.java:356)
	at org.springframework.boot.autoconfigure.orm.jpa.DatabaseLookup.getDatabase(DatabaseLookup.java:73)
	at org.springframework.boot.autoconfigure.orm.jpa.JpaProperties.determineDatabase(JpaProperties.java:142)
	at org.springframework.boot.autoconfigure.orm.jpa.JpaBaseConfiguration.jpaVendorAdapter(JpaBaseConfiguration.java:112)
	at org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaConfiguration$$EnhancerBySpringCGLIB$$7de2ed78.CGLIB$jpaVendorAdapter$7(<generated>)
	at org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaConfiguration$$EnhancerBySpringCGLIB$$7de2ed78$$FastClassBySpringCGLIB$$28f854a9.invoke(<generated>)
	at org.springframework.cglib.proxy.MethodProxy.invokeSuper(MethodProxy.java:244)
	at org.springframework.context.annotation.ConfigurationClassEnhancer$BeanMethodInterceptor.intercept(ConfigurationClassEnhancer.java:363)
	at org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaConfiguration$$EnhancerBySpringCGLIB$$7de2ed78.jpaVendorAdapter(<generated>)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.beans.factory.support.SimpleInstantiationStrategy.instantiate(SimpleInstantiationStrategy.java:154)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiate(ConstructorResolver.java:622)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:456)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1321)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1160)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:555)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:515)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:277)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1251)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1171)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:857)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:760)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:509)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1321)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1160)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:555)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:515)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.beans.factory.config.DependencyDescriptor.resolveCandidate(DependencyDescriptor.java:277)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.doResolveDependency(DefaultListableBeanFactory.java:1251)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveDependency(DefaultListableBeanFactory.java:1171)
	at org.springframework.beans.factory.support.ConstructorResolver.resolveAutowiredArgument(ConstructorResolver.java:857)
	at org.springframework.beans.factory.support.ConstructorResolver.createArgumentArray(ConstructorResolver.java:760)
	at org.springframework.beans.factory.support.ConstructorResolver.instantiateUsingFactoryMethod(ConstructorResolver.java:509)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.instantiateUsingFactoryMethod(AbstractAutowireCapableBeanFactory.java:1321)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBeanInstance(AbstractAutowireCapableBeanFactory.java:1160)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:555)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:515)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1105)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:867)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:549)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:140)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:742)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:389)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:311)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1213)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1202)
	at com.karimerri.aladin_api.AladinApiApplication.main(AladinApiApplication.java:13)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49)
Caused by: org.h2.jdbc.JdbcSQLNonTransientException: Unknown data type: "TINYINT"; SQL statement:
CREATE CACHED TABLE "ALADIN"."PRODUCTS"(
    "ID" INT NOT NULL,
    "PRODUCT_CODE" VARCHAR(25),
    "NAME" VARCHAR(255),
    "OVERVIEW" VARCHAR(255),
    "BROWSING_NAME" VARCHAR(255),
    "DESCRIPTION" VARCHAR(250),
    "STANDARD_COST" DECIMAL(19, 4) DEFAULT '0.0000',
    "LIST_PRICE" DECIMAL(19, 4) DEFAULT '0.0000' NOT NULL,
    "TARGET_LEVEL" INT,
    "REORDER_LEVEL" INT,
    "MINIMUM_REORDER_QUANTITY" INT,
    "QUANTITY_PER_UNIT" VARCHAR(50),
    "DISCONTINUED" TINYINT DEFAULT '0',
    "DEFAULT_IMAGE" VARCHAR(255),
    "CREATED_ON" DATETIME,
    "RANK" INT NOT NULL,
    "SALE_PRICE" DOUBLE,
    "SKU" VARCHAR(255),
    "STATUS" INT,
    "UPDATED_ON" DATETIME
) [50004-199]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:502)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:427)
	... 104 more
2020-04-23 20:57:45 database: CREATE CACHED TABLE "ALADIN"."PRODUCTS"(
    "ID" INT NOT NULL,
    "PRODUCT_CODE" VARCHAR(25),
    "NAME" VARCHAR(255),
    "OVERVIEW" VARCHAR(255),
    "BROWSING_NAME" VARCHAR(255),
    "DESCRIPTION" VARCHAR(250),
    "STANDARD_COST" DECIMAL(19, 4) DEFAULT '0.0000',
    "LIST_PRICE" DECIMAL(19, 4) DEFAULT '0.0000' NOT NULL,
    "TARGET_LEVEL" INT,
    "REORDER_LEVEL" INT,
    "MINIMUM_REORDER_QUANTITY" INT,
    "QUANTITY_PER_UNIT" VARCHAR(50),
    "DISCONTINUED" TINYINT DEFAULT '0',
    "DEFAULT_IMAGE" VARCHAR(255),
    "CREATED_ON" DATETIME,
    "RANK" INT NOT NULL,
    "SALE_PRICE" DOUBLE,
    "SKU" VARCHAR(255),
    "STATUS" INT,
    "UPDATED_ON" DATETIME
)
org.h2.jdbc.JdbcSQLNonTransientException: Unknown data type: "TINYINT"; SQL statement:
CREATE CACHED TABLE "ALADIN"."PRODUCTS"(
    "ID" INT NOT NULL,
    "PRODUCT_CODE" VARCHAR(25),
    "NAME" VARCHAR(255),
    "OVERVIEW" VARCHAR(255),
    "BROWSING_NAME" VARCHAR(255),
    "DESCRIPTION" VARCHAR(250),
    "STANDARD_COST" DECIMAL(19, 4) DEFAULT '0.0000',
    "LIST_PRICE" DECIMAL(19, 4) DEFAULT '0.0000' NOT NULL,
    "TARGET_LEVEL" INT,
    "REORDER_LEVEL" INT,
    "MINIMUM_REORDER_QUANTITY" INT,
    "QUANTITY_PER_UNIT" VARCHAR(50),
    "DISCONTINUED" TINYINT DEFAULT '0',
    "DEFAULT_IMAGE" VARCHAR(255),
    "CREATED_ON" DATETIME,
    "RANK" INT NOT NULL,
    "SALE_PRICE" DOUBLE,
    "SKU" VARCHAR(255),
    "STATUS" INT,
    "UPDATED_ON" DATETIME
) [50004-199]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:502)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:427)
	at org.h2.message.DbException.get(DbException.java:205)
	at org.h2.message.DbException.get(DbException.java:181)
	at org.h2.command.Parser.parseColumnWithType(Parser.java:5524)
	at org.h2.command.Parser.parseColumnForTable(Parser.java:5254)
	at org.h2.command.Parser.parseTableColumnDefinition(Parser.java:7932)
	at org.h2.command.Parser.parseCreateTable(Parser.java:7832)
	at org.h2.command.Parser.parseCreate(Parser.java:5818)
	at org.h2.command.Parser.parsePrepared(Parser.java:846)
	at org.h2.command.Parser.parse(Parser.java:788)
	at org.h2.command.Parser.parse(Parser.java:760)
	at org.h2.command.Parser.prepare(Parser.java:667)
	at org.h2.engine.Session.prepare(Session.java:592)
	at org.h2.engine.Session.prepare(Session.java:576)
	at org.h2.engine.MetaRecord.execute(MetaRecord.java:58)
	at org.h2.engine.Database.open(Database.java:842)
	at org.h2.engine.Database.openDatabase(Database.java:319)
	at org.h2.engine.Database.<init>(Database.java:313)
	at org.h2.engine.Engine.openSession(Engine.java:69)
	at org.h2.engine.Engine.openSession(Engine.java:201)
	at org.h2.engine.Engine.createSessionAndValidate(Engine.java:178)
	at org.h2.engine.Engine.createSession(Engine.java:161)
	at org.h2.engine.Engine.createSession(Engine.java:31)
	at org.h2.engine.SessionRemote.connectEmbeddedOrServer(SessionRemote.java:336)
	at org.h2.jdbc.JdbcConnection.<init>(JdbcConnection.java:169)
	at org.h2.jdbc.JdbcConnection.<init>(JdbcConnection.java:148)
	at org.h2.Driver.connect(Driver.java:69)
	at com.zaxxer.hikari.util.DriverDataSource.getConnection(DriverDataSource.java:136)
	at com.zaxxer.hikari.pool.PoolBase.newConnection(PoolBase.java:369)
	at com.zaxxer.hikari.pool.PoolBase.newPoolEntry(PoolBase.java:198)
	at com.zaxxer.hikari.pool.HikariPool.createPoolEntry(HikariPool.java:467)
	at com.zaxxer.hikari.pool.HikariPool.checkFailFast(HikariPool.java:541)
	at com.zaxxer.hikari.pool.HikariPool.<init>(HikariPool.java:115)
	at com.zaxxer.hikari.HikariDataSource.getConnection(HikariDataSource.java:112)
	at org.hibernate.engine.jdbc.connections.internal.DatasourceConnectionProviderImpl.getConnection(DatasourceConnectionProviderImpl.java:122)
	at org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator$ConnectionProviderJdbcConnectionAccess.obtainConnection(JdbcEnvironmentInitiator.java:180)
	at org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator.initiateService(JdbcEnvironmentInitiator.java:68)
	at org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator.initiateService(JdbcEnvironmentInitiator.java:35)
	at org.hibernate.boot.registry.internal.StandardServiceRegistryImpl.initiateService(StandardServiceRegistryImpl.java:94)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.createService(AbstractServiceRegistryImpl.java:263)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.initializeService(AbstractServiceRegistryImpl.java:237)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.getService(AbstractServiceRegistryImpl.java:214)
	at org.hibernate.id.factory.internal.DefaultIdentifierGeneratorFactory.injectServices(DefaultIdentifierGeneratorFactory.java:152)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.injectDependencies(AbstractServiceRegistryImpl.java:286)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.initializeService(AbstractServiceRegistryImpl.java:243)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.getService(AbstractServiceRegistryImpl.java:214)
	at org.hibernate.boot.internal.InFlightMetadataCollectorImpl.<init>(InFlightMetadataCollectorImpl.java:179)
	at org.hibernate.boot.model.process.spi.MetadataBuildingProcess.complete(MetadataBuildingProcess.java:119)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.metadata(EntityManagerFactoryBuilderImpl.java:904)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.build(EntityManagerFactoryBuilderImpl.java:935)
	at org.springframework.orm.jpa.vendor.SpringHibernateJpaPersistenceProvider.createContainerEntityManagerFactory(SpringHibernateJpaPersistenceProvider.java:57)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:365)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.buildNativeEntityManagerFactory(AbstractEntityManagerFactoryBean.java:390)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:377)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.afterPropertiesSet(LocalContainerEntityManagerFactoryBean.java:341)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1837)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1774)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:593)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:515)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1105)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:867)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:549)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:140)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:742)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:389)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:311)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1213)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1202)
	at com.karimerri.aladin_api.AladinApiApplication.main(AladinApiApplication.java:13)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49)
2020-04-23 20:57:45 database: opening C:/Users/Amazigh/Documents/GitHub/database/aladin
org.h2.message.DbException: Unknown data type: "TINYINT" [50004-199]
	at org.h2.message.DbException.get(DbException.java:205)
	at org.h2.message.DbException.get(DbException.java:181)
	at org.h2.command.Parser.parseColumnWithType(Parser.java:5524)
	at org.h2.command.Parser.parseColumnForTable(Parser.java:5254)
	at org.h2.command.Parser.parseTableColumnDefinition(Parser.java:7932)
	at org.h2.command.Parser.parseCreateTable(Parser.java:7832)
	at org.h2.command.Parser.parseCreate(Parser.java:5818)
	at org.h2.command.Parser.parsePrepared(Parser.java:846)
	at org.h2.command.Parser.parse(Parser.java:788)
	at org.h2.command.Parser.parse(Parser.java:760)
	at org.h2.command.Parser.prepare(Parser.java:667)
	at org.h2.engine.Session.prepare(Session.java:592)
	at org.h2.engine.Session.prepare(Session.java:576)
	at org.h2.engine.MetaRecord.execute(MetaRecord.java:58)
	at org.h2.engine.Database.open(Database.java:842)
	at org.h2.engine.Database.openDatabase(Database.java:319)
	at org.h2.engine.Database.<init>(Database.java:313)
	at org.h2.engine.Engine.openSession(Engine.java:69)
	at org.h2.engine.Engine.openSession(Engine.java:201)
	at org.h2.engine.Engine.createSessionAndValidate(Engine.java:178)
	at org.h2.engine.Engine.createSession(Engine.java:161)
	at org.h2.engine.Engine.createSession(Engine.java:31)
	at org.h2.engine.SessionRemote.connectEmbeddedOrServer(SessionRemote.java:336)
	at org.h2.jdbc.JdbcConnection.<init>(JdbcConnection.java:169)
	at org.h2.jdbc.JdbcConnection.<init>(JdbcConnection.java:148)
	at org.h2.Driver.connect(Driver.java:69)
	at com.zaxxer.hikari.util.DriverDataSource.getConnection(DriverDataSource.java:136)
	at com.zaxxer.hikari.pool.PoolBase.newConnection(PoolBase.java:369)
	at com.zaxxer.hikari.pool.PoolBase.newPoolEntry(PoolBase.java:198)
	at com.zaxxer.hikari.pool.HikariPool.createPoolEntry(HikariPool.java:467)
	at com.zaxxer.hikari.pool.HikariPool.checkFailFast(HikariPool.java:541)
	at com.zaxxer.hikari.pool.HikariPool.<init>(HikariPool.java:115)
	at com.zaxxer.hikari.HikariDataSource.getConnection(HikariDataSource.java:112)
	at org.hibernate.engine.jdbc.connections.internal.DatasourceConnectionProviderImpl.getConnection(DatasourceConnectionProviderImpl.java:122)
	at org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator$ConnectionProviderJdbcConnectionAccess.obtainConnection(JdbcEnvironmentInitiator.java:180)
	at org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator.initiateService(JdbcEnvironmentInitiator.java:68)
	at org.hibernate.engine.jdbc.env.internal.JdbcEnvironmentInitiator.initiateService(JdbcEnvironmentInitiator.java:35)
	at org.hibernate.boot.registry.internal.StandardServiceRegistryImpl.initiateService(StandardServiceRegistryImpl.java:94)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.createService(AbstractServiceRegistryImpl.java:263)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.initializeService(AbstractServiceRegistryImpl.java:237)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.getService(AbstractServiceRegistryImpl.java:214)
	at org.hibernate.id.factory.internal.DefaultIdentifierGeneratorFactory.injectServices(DefaultIdentifierGeneratorFactory.java:152)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.injectDependencies(AbstractServiceRegistryImpl.java:286)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.initializeService(AbstractServiceRegistryImpl.java:243)
	at org.hibernate.service.internal.AbstractServiceRegistryImpl.getService(AbstractServiceRegistryImpl.java:214)
	at org.hibernate.boot.internal.InFlightMetadataCollectorImpl.<init>(InFlightMetadataCollectorImpl.java:179)
	at org.hibernate.boot.model.process.spi.MetadataBuildingProcess.complete(MetadataBuildingProcess.java:119)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.metadata(EntityManagerFactoryBuilderImpl.java:904)
	at org.hibernate.jpa.boot.internal.EntityManagerFactoryBuilderImpl.build(EntityManagerFactoryBuilderImpl.java:935)
	at org.springframework.orm.jpa.vendor.SpringHibernateJpaPersistenceProvider.createContainerEntityManagerFactory(SpringHibernateJpaPersistenceProvider.java:57)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.createNativeEntityManagerFactory(LocalContainerEntityManagerFactoryBean.java:365)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.buildNativeEntityManagerFactory(AbstractEntityManagerFactoryBean.java:390)
	at org.springframework.orm.jpa.AbstractEntityManagerFactoryBean.afterPropertiesSet(AbstractEntityManagerFactoryBean.java:377)
	at org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean.afterPropertiesSet(LocalContainerEntityManagerFactoryBean.java:341)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.invokeInitMethods(AbstractAutowireCapableBeanFactory.java:1837)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.initializeBean(AbstractAutowireCapableBeanFactory.java:1774)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.doCreateBean(AbstractAutowireCapableBeanFactory.java:593)
	at org.springframework.beans.factory.support.AbstractAutowireCapableBeanFactory.createBean(AbstractAutowireCapableBeanFactory.java:515)
	at org.springframework.beans.factory.support.AbstractBeanFactory.lambda$doGetBean$0(AbstractBeanFactory.java:320)
	at org.springframework.beans.factory.support.DefaultSingletonBeanRegistry.getSingleton(DefaultSingletonBeanRegistry.java:222)
	at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:318)
	at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1105)
	at org.springframework.context.support.AbstractApplicationContext.finishBeanFactoryInitialization(AbstractApplicationContext.java:867)
	at org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:549)
	at org.springframework.boot.web.servlet.context.ServletWebServerApplicationContext.refresh(ServletWebServerApplicationContext.java:140)
	at org.springframework.boot.SpringApplication.refresh(SpringApplication.java:742)
	at org.springframework.boot.SpringApplication.refreshContext(SpringApplication.java:389)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:311)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1213)
	at org.springframework.boot.SpringApplication.run(SpringApplication.java:1202)
	at com.karimerri.aladin_api.AladinApiApplication.main(AladinApiApplication.java:13)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
	at java.lang.reflect.Method.invoke(Unknown Source)
	at org.springframework.boot.devtools.restart.RestartLauncher.run(RestartLauncher.java:49)
Caused by: org.h2.jdbc.JdbcSQLNonTransientException: Unknown data type: "TINYINT"; SQL statement:
CREATE CACHED TABLE "ALADIN"."PRODUCTS"(
    "ID" INT NOT NULL,
    "PRODUCT_CODE" VARCHAR(25),
    "NAME" VARCHAR(255),
    "OVERVIEW" VARCHAR(255),
    "BROWSING_NAME" VARCHAR(255),
    "DESCRIPTION" VARCHAR(250),
    "STANDARD_COST" DECIMAL(19, 4) DEFAULT '0.0000',
    "LIST_PRICE" DECIMAL(19, 4) DEFAULT '0.0000' NOT NULL,
    "TARGET_LEVEL" INT,
    "REORDER_LEVEL" INT,
    "MINIMUM_REORDER_QUANTITY" INT,
    "QUANTITY_PER_UNIT" VARCHAR(50),
    "DISCONTINUED" TINYINT DEFAULT '0',
    "DEFAULT_IMAGE" VARCHAR(255),
    "CREATED_ON" DATETIME,
    "RANK" INT NOT NULL,
    "SALE_PRICE" DOUBLE,
    "SKU" VARCHAR(255),
    "STATUS" INT,
    "UPDATED_ON" DATETIME
) [50004-199]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:502)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:427)
	... 77 more
2020-04-24 16:36:22 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "ALTER TABLE ALADIN.ORDER_PRODUCT RENAME ORDER_ITEM[*] "; expected "COLUMN, CONSTRAINT, TO"; SQL statement:
alter table ALADIN.ORDER_PRODUCT rename order_item [42001-199]
2020-04-24 16:40:26 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "ALTER TABLE ALADIN.ORDER_ITEM RENAME PRODUCT_ID[*] TO ITEM_ID "; expected "COLUMN, CONSTRAINT, TO"; SQL statement:
alter table ALADIN.ORDER_ITEM rename product_id to item_id [42001-199]
2020-04-24 16:58:17 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "ALTER TABLE ALADIN.ITEMS ADD COLUMN  ITEM_STATUS VARCHAR(25)                            ,[*] "; SQL statement:
alter table ALADIN.ITEMS add column  item_status VARCHAR(25)                            , [42000-199]
2020-04-24 17:39:22 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "ALTER TABLE ALADIN.ORDERS ADD COLUMN  ORDER_NUMBER INT(11)     ,[*] "; SQL statement:
alter table ALADIN.ORDERS add column  order_number INT(11)     , [42000-199]
2020-04-24 17:40:29 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "ALTER TABLE ALADIN.ORDERS RENAME COLUMN  ORDER_NUMBER TO ORDER_NUMBER VARCHAR[*](50) "; SQL statement:
alter table ALADIN.ORDERS rename column  order_number to order_number VARCHAR(50) [42000-199]
2020-04-24 18:16:30 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "ALTER ATBLE[*]  ALADIN.ORDERS ADD COLUMN ITEM_ID INT "; expected "TABLE, USER, INDEX, SCHEMA, SEQUENCE, VIEW"; SQL statement:
alter atble  ALADIN.ORDERS add column item_id INT [42001-199]
2020-04-24 18:16:40 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "ALTER ATBLE[*]  ALADIN.ORDERS ADD COLUMN ITEM_ID INT "; expected "TABLE, USER, INDEX, SCHEMA, SEQUENCE, VIEW"; SQL statement:
alter atble  ALADIN.ORDERS add column item_id INT [42001-199]
2020-04-24 18:16:45 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "ALTER ATBLE[*]  ALADIN.ORDERS ADD COLUMN ITEM_ID INT(11) "; expected "TABLE, USER, INDEX, SCHEMA, SEQUENCE, VIEW"; SQL statement:
alter atble  ALADIN.ORDERS add column item_id INT(11) [42001-199]
2020-04-24 18:18:35 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "ALTER TABLE ALADIN.ITEMS AND[*] COLUMN ORDER_ID "; expected "ADD, SET, RENAME, DROP, CHANGE, MODIFY, ALTER"; SQL statement:
alter table ALADIN.ITEMS and column order_id [42001-199]
2020-04-24 18:18:49 jdbc[3]: exception
org.h2.jdbc.JdbcSQLNonTransientException: Unknown data type: ; SQL statement:
alter table ALADIN.ITEMS add column order_id [50004-199]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:502)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:427)
	at org.h2.message.DbException.get(DbException.java:205)
	at org.h2.message.DbException.get(DbException.java:181)
	at org.h2.command.Parser.parseColumnWithType(Parser.java:5524)
	at org.h2.command.Parser.parseColumnForTable(Parser.java:5254)
	at org.h2.command.Parser.parseTableColumnDefinition(Parser.java:7932)
	at org.h2.command.Parser.parseAlterTableAddColumn(Parser.java:7586)
	at org.h2.command.Parser.parseAlterTable(Parser.java:7209)
	at org.h2.command.Parser.parseAlter(Parser.java:6546)
	at org.h2.command.Parser.parsePrepared(Parser.java:828)
	at org.h2.command.Parser.parse(Parser.java:788)
	at org.h2.command.Parser.parse(Parser.java:760)
	at org.h2.command.Parser.prepareCommand(Parser.java:683)
	at org.h2.engine.Session.prepareLocal(Session.java:627)
	at org.h2.engine.Session.prepareCommand(Session.java:565)
	at org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1292)
	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:217)
	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:1113)
	at org.h2.server.web.WebApp.getResult(WebApp.java:1436)
	at org.h2.server.web.WebApp.query(WebApp.java:1111)
	at org.h2.server.web.WebApp$1.next(WebApp.java:1073)
	at org.h2.server.web.WebApp$1.next(WebApp.java:1060)
	at org.h2.server.web.WebThread.process(WebThread.java:173)
	at org.h2.server.web.WebThread.run(WebThread.java:93)
	at java.lang.Thread.run(Unknown Source)
2020-04-24 18:35:55 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "SELECT * FROM ALADIN.ITEMS JOINT ALADIN[*].ORDERS "; SQL statement:
SELECT * FROM ALADIN.ITEMS joint ALADIN.ORDERS [42000-199]
2020-04-24 18:36:21 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "SELECT * FROM ALADIN.ITEMS JOINT ALADIN[*].ORDERS ITEMS.ORDER_ID = ORDERS.ID "; SQL statement:
SELECT * FROM ALADIN.ITEMS joint ALADIN.ORDERS ITEMS.order_id = ORDERS.id [42000-199]
2020-04-24 18:36:49 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "SELECT * FROM ALADIN.ITEMS JOINT ALADIN[*].ORDERS ON ITEMS.ORDER_ID = ORDERS.ID "; SQL statement:
SELECT * FROM ALADIN.ITEMS joint ALADIN.ORDERS ON ITEMS.order_id = ORDERS.id [42000-199]
2020-04-24 18:36:58 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Syntax error in SQL statement "SELECT * FROM ALADIN.ITEMS JOINT ALADIN[*].ORDERS ON ALADIN.ITEMS.ORDER_ID = ALADIN.ORDERS.ID "; SQL statement:
SELECT * FROM ALADIN.ITEMS joint ALADIN.ORDERS ON ALADIN.ITEMS.order_id = ALADIN.ORDERS.id [42000-199]
2020-04-24 19:20:26 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Schema "ALADDIN" not found; SQL statement:
insert into aladdin.property (id,groupe,name,value) values 
(1  , 'Order'       , 'ldn.props.alert.days'                    , '31'),
(2  , 'Order'       , 'ldn.props.warning.days'                  , '60'),
(3  , 'Notfication' , 'ldn.props.mail.default.to'               , 'support.ldn@ldn.ca'),
(4  , 'Notfication' , 'ldn.props.mail.cc'                       , 'karimerri@gmail.com'),
(5  , 'Notfication' , 'ldn.props.mail.alert.subject'            , 'Alert'),
(6  , 'Notfication' , 'ldn.props.mail.alert.resend'             , 'yes'),
(7  , 'Notfication' , 'ldn.props.mail.alert.resend.frequency'   , '5'),
(8  , 'Notfication' , 'ldn.props.mail.warning.subject'          , 'Warning'),
(9  , 'Notfication' , 'ldn.props.mail.warning.resend'           , 'no'),
(10 , 'Notfication' , 'ldn.props.mail.warning.resend.frequency' , '0') [90079-199]
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:573)
	at org.h2.message.DbException.getJdbcSQLException(DbException.java:427)
	at org.h2.message.DbException.get(DbException.java:205)
	at org.h2.message.DbException.get(DbException.java:181)
	at org.h2.command.Parser.getSchema(Parser.java:1132)
	at org.h2.command.Parser.getSchema(Parser.java:1138)
	at org.h2.command.Parser.readTableOrView(Parser.java:7122)
	at org.h2.command.Parser.readTableOrView(Parser.java:7117)
	at org.h2.command.Parser.parseInsert(Parser.java:1682)
	at org.h2.command.Parser.parsePrepared(Parser.java:891)
	at org.h2.command.Parser.parse(Parser.java:788)
	at org.h2.command.Parser.parse(Parser.java:760)
	at org.h2.command.Parser.prepareCommand(Parser.java:683)
	at org.h2.engine.Session.prepareLocal(Session.java:627)
	at org.h2.engine.Session.prepareCommand(Session.java:565)
	at org.h2.jdbc.JdbcConnection.prepareCommand(JdbcConnection.java:1292)
	at org.h2.jdbc.JdbcStatement.executeInternal(JdbcStatement.java:217)
	at org.h2.jdbc.JdbcStatement.execute(JdbcStatement.java:1113)
	at org.h2.server.web.WebApp.getResult(WebApp.java:1436)
	at org.h2.server.web.WebApp.query(WebApp.java:1111)
	at org.h2.server.web.WebApp$1.next(WebApp.java:1073)
	at org.h2.server.web.WebApp$1.next(WebApp.java:1060)
	at org.h2.server.web.WebThread.process(WebThread.java:173)
	at org.h2.server.web.WebThread.run(WebThread.java:93)
	at java.lang.Thread.run(Unknown Source)
2020-04-24 19:40:54 jdbc[3]: exception
org.h2.jdbc.JdbcSQLSyntaxErrorException: Table "ADDRESSES" already exists; SQL statement:
alter table ALADIN.ADDRESSES rename to ADDRESSES [42101-199]
